{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Brev Brev is a developer environment that: Automatically sets up your machine Instantly deploys your code Gives you unlimited resources Getting Started With Brev To get started with Brev, create an account at console.brev.dev Build something great :)","title":"Welcome to Brev"},{"location":"#welcome-to-brev","text":"Brev is a developer environment that: Automatically sets up your machine Instantly deploys your code Gives you unlimited resources","title":"Welcome to Brev"},{"location":"#getting-started-with-brev","text":"To get started with Brev, create an account at console.brev.dev Build something great :)","title":"Getting Started With Brev"},{"location":"howto/","text":"How To Common .Brev Installations Cheatsheet for common installations for your .brev setup script Find your localhost Looking for your localhost url? Make a Port Public Remove auth from your localhost Environment Variables in Setup Script How to add environment variables in your setup script Reset Your Machine to Troubleshoot You can reset your Brev machine and get a newly configured one to troubleshoot.","title":"Home"},{"location":"howto/#how-to","text":"","title":"How To"},{"location":"howto/#common-brev-installations","text":"Cheatsheet for common installations for your .brev setup script","title":"Common .Brev Installations"},{"location":"howto/#find-your-localhost","text":"Looking for your localhost url?","title":"Find your localhost"},{"location":"howto/#make-a-port-public","text":"Remove auth from your localhost","title":"Make a Port Public"},{"location":"howto/#environment-variables-in-setup-script","text":"How to add environment variables in your setup script","title":"Environment Variables in Setup Script"},{"location":"howto/#reset-your-machine-to-troubleshoot","text":"You can reset your Brev machine and get a newly configured one to troubleshoot.","title":"Reset Your Machine to Troubleshoot"},{"location":"howto/automatically-set-up/","text":"How To Automatically set up Brev machines with .brev setup script. Specify software and dependencies that are required for your project. Creating a .brev setup script for each Brev project will standardize dependencies, packages and tools across all developers contributing to the same project (ex. Node v14, Yarn v1.22) Below are common installations for your convenience. Add them to your root project directory at /.brev/setup.sh Install Yarn ##### Yarn ##### ( echo \"\" ; echo \"##### Yarn #####\" ; echo \"\" ; ) curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list sudo apt update sudo apt install -y yarn Install Homebrew ##### Homebrew ##### ( echo \"\" ; echo \"##### Homebrew #####\" ; echo \"\" ; ) curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh | bash - echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"' >> /home/brev/.bash_profile echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"' >> /home/brev/.zshrc eval \" $( /home/linuxbrew/.linuxbrew/bin/brew shellenv ) \" Node ##### Node v14.x + npm ##### ( echo \"\" ; echo \"##### Node v14.x + npm #####\" ; echo \"\" ; ) sudo apt install ca-certificates curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash - sudo apt-get install -y nodejs Python, Pip, and Poetry ##### Python + Pip + Poetry ##### ( echo \"\" ; echo \"##### Python + Pip + Poetry #####\" ; echo \"\" ; ) sudo apt-get install -y python3-distutils sudo apt-get install -y python3-apt curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3 - curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py rm get-pip.py echo \"\" >> ~/.zshrc echo \"export PATH=/home/brev/.local/bin: $PATH \" >> ~/.zshrc echo \"\" >> ~/.bashrc echo \"export PATH=/home/brev/.local/bin: $PATH \" >> ~/.bashrc source ~/.zshrc source ~/.bashrc source $HOME /.poetry/env Golang ##### Golang v16x ##### ( echo \"\" ; echo \"##### Golang v16x #####\" ; echo \"\" ; ) wget https://golang.org/dl/go1.16.7.linux-amd64.tar.gz sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.16.7.linux-amd64.tar.gz echo \"\" | sudo tee -a ~/.bashrc echo \"export PATH=\\$PATH:/usr/local/go/bin\" | sudo tee -a ~/.bashrc source ~/.bashrc echo \"\" | sudo tee -a ~/.zshrc echo \"export PATH=\\$PATH:/usr/local/go/bin\" | sudo tee -a ~/.zshrc source ~/.zshrc rm go1.16.7.linux-amd64.tar.gz Custom command example We recommend the echo statement before any command for clearer output logs. ##### Custom commands ##### ( echo \"\" ; echo \"##### Custom commands #####\" ; echo \"\" ; ) npm install","title":"Common Installations"},{"location":"howto/automatically-set-up/#how-to","text":"","title":"How To"},{"location":"howto/automatically-set-up/#automatically-set-up-brev-machines-with-brev-setup-script","text":"Specify software and dependencies that are required for your project. Creating a .brev setup script for each Brev project will standardize dependencies, packages and tools across all developers contributing to the same project (ex. Node v14, Yarn v1.22) Below are common installations for your convenience. Add them to your root project directory at /.brev/setup.sh","title":"Automatically set up Brev machines with .brev setup script."},{"location":"howto/automatically-set-up/#install-yarn","text":"##### Yarn ##### ( echo \"\" ; echo \"##### Yarn #####\" ; echo \"\" ; ) curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list sudo apt update sudo apt install -y yarn","title":"Install Yarn"},{"location":"howto/automatically-set-up/#install-homebrew","text":"##### Homebrew ##### ( echo \"\" ; echo \"##### Homebrew #####\" ; echo \"\" ; ) curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh | bash - echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"' >> /home/brev/.bash_profile echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"' >> /home/brev/.zshrc eval \" $( /home/linuxbrew/.linuxbrew/bin/brew shellenv ) \"","title":"Install Homebrew"},{"location":"howto/automatically-set-up/#node","text":"##### Node v14.x + npm ##### ( echo \"\" ; echo \"##### Node v14.x + npm #####\" ; echo \"\" ; ) sudo apt install ca-certificates curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash - sudo apt-get install -y nodejs","title":"Node"},{"location":"howto/automatically-set-up/#python-pip-and-poetry","text":"##### Python + Pip + Poetry ##### ( echo \"\" ; echo \"##### Python + Pip + Poetry #####\" ; echo \"\" ; ) sudo apt-get install -y python3-distutils sudo apt-get install -y python3-apt curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3 - curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py rm get-pip.py echo \"\" >> ~/.zshrc echo \"export PATH=/home/brev/.local/bin: $PATH \" >> ~/.zshrc echo \"\" >> ~/.bashrc echo \"export PATH=/home/brev/.local/bin: $PATH \" >> ~/.bashrc source ~/.zshrc source ~/.bashrc source $HOME /.poetry/env","title":"Python, Pip, and Poetry"},{"location":"howto/automatically-set-up/#golang","text":"##### Golang v16x ##### ( echo \"\" ; echo \"##### Golang v16x #####\" ; echo \"\" ; ) wget https://golang.org/dl/go1.16.7.linux-amd64.tar.gz sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.16.7.linux-amd64.tar.gz echo \"\" | sudo tee -a ~/.bashrc echo \"export PATH=\\$PATH:/usr/local/go/bin\" | sudo tee -a ~/.bashrc source ~/.bashrc echo \"\" | sudo tee -a ~/.zshrc echo \"export PATH=\\$PATH:/usr/local/go/bin\" | sudo tee -a ~/.zshrc source ~/.zshrc rm go1.16.7.linux-amd64.tar.gz","title":"Golang"},{"location":"howto/automatically-set-up/#custom-command-example","text":"We recommend the echo statement before any command for clearer output logs. ##### Custom commands ##### ( echo \"\" ; echo \"##### Custom commands #####\" ; echo \"\" ; ) npm install","title":"Custom command example"},{"location":"howto/env-vars-dot-brev/","text":"How To Environment Variables in the Setup Script The .brev scripts executes once a Brev machine is provisioned, but are not preserved. You must instead add environment variables to a ~/.bashrc or ~/.zshrc file that gets sourced. For example, to install python's package manager pip which requires modifying the path, you'll need to first install pip: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py rm get-pip.py You'll need to instead put this new path in your zshrc and bashrc and source both files. printf \"\\n%s\\n\" \"export PATH=/home/brev/.local/bin: $PATH \" | tee -a ~/.bashrc | tee -a ~/.zshrc # Instead of exporting the variable: # export PATH=/home/brev/.local/bin:$PATH Here's the full snipped to add to .brev for properly installing pip: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py rm get-pip.py echo \"\" >> ~/.zshrc echo \"export PATH=/home/brev/.local/bin: $PATH \" >> ~/.zshrc echo \"\" >> ~/.bashrc echo \"export PATH=/home/brev/.local/bin: $PATH \" >> ~/.bashrc source ~/.zshrc source ~/.bashrc","title":"Environment Variables"},{"location":"howto/env-vars-dot-brev/#how-to","text":"","title":"How To"},{"location":"howto/env-vars-dot-brev/#environment-variables-in-the-setup-script","text":"The .brev scripts executes once a Brev machine is provisioned, but are not preserved. You must instead add environment variables to a ~/.bashrc or ~/.zshrc file that gets sourced. For example, to install python's package manager pip which requires modifying the path, you'll need to first install pip: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py rm get-pip.py You'll need to instead put this new path in your zshrc and bashrc and source both files. printf \"\\n%s\\n\" \"export PATH=/home/brev/.local/bin: $PATH \" | tee -a ~/.bashrc | tee -a ~/.zshrc # Instead of exporting the variable: # export PATH=/home/brev/.local/bin:$PATH Here's the full snipped to add to .brev for properly installing pip: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py rm get-pip.py echo \"\" >> ~/.zshrc echo \"export PATH=/home/brev/.local/bin: $PATH \" >> ~/.zshrc echo \"\" >> ~/.bashrc echo \"export PATH=/home/brev/.local/bin: $PATH \" >> ~/.bashrc source ~/.zshrc source ~/.bashrc","title":"Environment Variables in the Setup Script"},{"location":"howto/find-my-localhost/","text":"How To Find my localhost If you're inside your Brev workspace and are running something on localhost, you can access it using your workspace URL. From the dashboard, copy your url: Prefix the url with your port number + \"-\" and that's your url! For example: If your workspace url is jelly-brevdev.brev.sh and you're running on localhost:3000 your localhost url is 3000-jelly-brevdev.brev.sh .","title":"Find Your Localhost"},{"location":"howto/find-my-localhost/#how-to","text":"","title":"How To"},{"location":"howto/find-my-localhost/#find-my-localhost","text":"If you're inside your Brev workspace and are running something on localhost, you can access it using your workspace URL. From the dashboard, copy your url: Prefix the url with your port number + \"-\" and that's your url! For example: If your workspace url is jelly-brevdev.brev.sh and you're running on localhost:3000 your localhost url is 3000-jelly-brevdev.brev.sh .","title":"Find my localhost"},{"location":"howto/make-port-public/","text":"How To Make a port public If you're accessing your localhost url such as 3000-jelly-brevdev.brev.sh , you'll notice it requires your password. If you want to remove auth to use Postman, consume the endpoint in your frontend, or just show your mom what you built, you can do so in the .brev/ports.yaml added to every Brev workspace. Add the port you wish to expose in the list and that's it! Note: the version field is optional. It could be useful if you choose to commit this to your project repo.","title":"Make a Port Public"},{"location":"howto/make-port-public/#how-to","text":"","title":"How To"},{"location":"howto/make-port-public/#make-a-port-public","text":"If you're accessing your localhost url such as 3000-jelly-brevdev.brev.sh , you'll notice it requires your password. If you want to remove auth to use Postman, consume the endpoint in your frontend, or just show your mom what you built, you can do so in the .brev/ports.yaml added to every Brev workspace. Add the port you wish to expose in the list and that's it! Note: the version field is optional. It could be useful if you choose to commit this to your project repo.","title":"Make a port public"},{"location":"howto/secret-variables/","text":"How To Securely use secret variables If you're building with services such as AWS, you'll need a secure place for credentials and configs, such as those in the ~/.aws directory on your computer. Brev has an encrypted secrets manager for these types of variables. Go to your Account page on the Brev dashboard for the encrypted secrets manger Click on \"New Secret and populate the form accordingly. You can load environment variables or change the type from \"Environment Variables\" to \"File\" for something like the .aws/credentials file (as shown in the picture). Setting secrets or environment variables for your organization The example above sets your personal secret for all of your Brev workspaces. If you wish to set a variable or secret for your entire org, go to your organization's settings from the organization drop down and use the encrypted secret manager there.","title":"Encrypted Secrets"},{"location":"howto/secret-variables/#how-to","text":"Securely use secret variables If you're building with services such as AWS, you'll need a secure place for credentials and configs, such as those in the ~/.aws directory on your computer. Brev has an encrypted secrets manager for these types of variables. Go to your Account page on the Brev dashboard for the encrypted secrets manger Click on \"New Secret and populate the form accordingly. You can load environment variables or change the type from \"Environment Variables\" to \"File\" for something like the .aws/credentials file (as shown in the picture).","title":"How To"},{"location":"howto/secret-variables/#setting-secrets-or-environment-variables-for-your-organization","text":"The example above sets your personal secret for all of your Brev workspaces. If you wish to set a variable or secret for your entire org, go to your organization's settings from the organization drop down and use the encrypted secret manager there.","title":"Setting secrets or environment variables for your organization"},{"location":"howto/troubleshoot-reset/","text":"How To Reset Your Machine If you setup your .brev directory , you can easily dispose of machines if they get into a bad state. Your fresh machine will come configured, so you can freely reset when you encounter problems. You can reset your workspace by going to workspace settings and clicking the 'reset' button in the Danger Zone. Note: Resetting your workspace will delete all files that aren't committed or in the .brev directory.","title":"Troubleshoot Reset"},{"location":"howto/troubleshoot-reset/#how-to","text":"","title":"How To"},{"location":"howto/troubleshoot-reset/#reset-your-machine","text":"If you setup your .brev directory , you can easily dispose of machines if they get into a bad state. Your fresh machine will come configured, so you can freely reset when you encounter problems. You can reset your workspace by going to workspace settings and clicking the 'reset' button in the Danger Zone. Note: Resetting your workspace will delete all files that aren't committed or in the .brev directory.","title":"Reset Your Machine"},{"location":"reference/","text":"Reference Brev creates your powerful computer in the cloud for development. Everything has moved to the cloud except your development, which doesn't make a ton of sense since development has the most to benefit from the cloud: unlimited ram and CPU instant upgrades to the latest and greatest hardware no more wasting time with machine configurations get a public url for anything you're working on: APIs, front ends, etc. Brev is not a streamed computer-- it's a service that configures your powerful cloud computer for you to build anything with. You are the superuser on your Brev machine. The .brev directory Brev solves configurations with the .brev directory. There are two types of configurations: Personal dev configs, such as Zsh vs Bash, light mode vs dark mode, keybindings, and certain extensions Repo configs, such as node version, python version, any specific installation/set up/onboarding instructions. Personal .brev For the first type of configs, go to your Account and update the Workspace Settings Repo. You'll need a git repo that just contains a .brev/setup.sh file. Fork this repo as a good place to start. Project .brev Automatically configure your project for any new contributor by commiting a .brev/setup.sh to the code repository. Brev will automatically execute the script for every new workspace created. Brev automatically creates the .brev/setup.sh if it doesn't exist.","title":"Home"},{"location":"reference/#reference","text":"Brev creates your powerful computer in the cloud for development. Everything has moved to the cloud except your development, which doesn't make a ton of sense since development has the most to benefit from the cloud: unlimited ram and CPU instant upgrades to the latest and greatest hardware no more wasting time with machine configurations get a public url for anything you're working on: APIs, front ends, etc. Brev is not a streamed computer-- it's a service that configures your powerful cloud computer for you to build anything with. You are the superuser on your Brev machine.","title":"Reference"},{"location":"reference/#the-brev-directory","text":"Brev solves configurations with the .brev directory. There are two types of configurations: Personal dev configs, such as Zsh vs Bash, light mode vs dark mode, keybindings, and certain extensions Repo configs, such as node version, python version, any specific installation/set up/onboarding instructions.","title":"The .brev directory"},{"location":"reference/#personal-brev","text":"For the first type of configs, go to your Account and update the Workspace Settings Repo. You'll need a git repo that just contains a .brev/setup.sh file. Fork this repo as a good place to start.","title":"Personal .brev"},{"location":"reference/#project-brev","text":"Automatically configure your project for any new contributor by commiting a .brev/setup.sh to the code repository. Brev will automatically execute the script for every new workspace created. Brev automatically creates the .brev/setup.sh if it doesn't exist.","title":"Project .brev"},{"location":"reference/dot-brev-setup-script/","text":"Reference The .brev directory Creating a .brev setup script for each Brev project will standardize dependencies, packages and tools across all developers contributing to the same project (ex. Node v14, Yarn v1.22). By default, Brev will create a /.brev/setup.sh script in your workspace. If you commit this to your repo, it will get executed for every new Brev machine. The setup scripts run from the project directory, so /home/brev/<PROJECT_FOLDER_NAME> .brev/setup.sh This is the main configuration file that runs on your Brev machine, directly after we provision it and before your project is cloned. The working directory when the file is running is /home/brev/<PROJECT_FOLDER_NAME> . Careful not to place user settings in here (like VSCode extensions or settings) unless you want to impose them for every contributor in the project. Sometimes this is desireable, for example, to standardize linting practices across the team. A log file with output from the script. It is located at ./.brev/logs/setup.log . We strongly encourage echo-ing statements into this file when installing new software to know where errors might be located. You can look to setup your .brev directory for a cheatsheet of common installations. Note: Brev only hands over the machine once the setup is complete. This means running an open ended process like starting a server with npm run start in your .brev setup script will appear to be infinitely loading. We're working on a fix, but for now, please do not run open ended processes in this script. .brev/ports.yaml You can specify which ports you want publicly accessible. By default, any connection to your project is password protected. Although this is secure, it prevents testing routes, connecting different services (like a backend and frontend), and publicly sharing your project. Use this file to make your localhost url publicly accessible and share it with others. Be sure to never share your password! For example, if we run a React app on port 3000, we would want to expose port 3000 so we can use 3000-brevurl.brev.sh to access localhost:3000 . Note: often there's a security layer built into the code (for example, user auth) so publicly exposing a port is not a security worry. If there is a security concern with opening a port publicly, you can use the Brev CLI to port forward your Brev workspace port to your localhost. See below:","title":"Setup Scripts (.brev)"},{"location":"reference/dot-brev-setup-script/#reference","text":"","title":"Reference"},{"location":"reference/dot-brev-setup-script/#the-brev-directory","text":"Creating a .brev setup script for each Brev project will standardize dependencies, packages and tools across all developers contributing to the same project (ex. Node v14, Yarn v1.22). By default, Brev will create a /.brev/setup.sh script in your workspace. If you commit this to your repo, it will get executed for every new Brev machine. The setup scripts run from the project directory, so /home/brev/<PROJECT_FOLDER_NAME>","title":"The .brev directory"},{"location":"reference/dot-brev-setup-script/#brevsetupsh","text":"This is the main configuration file that runs on your Brev machine, directly after we provision it and before your project is cloned. The working directory when the file is running is /home/brev/<PROJECT_FOLDER_NAME> . Careful not to place user settings in here (like VSCode extensions or settings) unless you want to impose them for every contributor in the project. Sometimes this is desireable, for example, to standardize linting practices across the team. A log file with output from the script. It is located at ./.brev/logs/setup.log . We strongly encourage echo-ing statements into this file when installing new software to know where errors might be located. You can look to setup your .brev directory for a cheatsheet of common installations. Note: Brev only hands over the machine once the setup is complete. This means running an open ended process like starting a server with npm run start in your .brev setup script will appear to be infinitely loading. We're working on a fix, but for now, please do not run open ended processes in this script.","title":".brev/setup.sh"},{"location":"reference/dot-brev-setup-script/#brevportsyaml","text":"You can specify which ports you want publicly accessible. By default, any connection to your project is password protected. Although this is secure, it prevents testing routes, connecting different services (like a backend and frontend), and publicly sharing your project. Use this file to make your localhost url publicly accessible and share it with others. Be sure to never share your password! For example, if we run a React app on port 3000, we would want to expose port 3000 so we can use 3000-brevurl.brev.sh to access localhost:3000 . Note: often there's a security layer built into the code (for example, user auth) so publicly exposing a port is not a security worry. If there is a security concern with opening a port publicly, you can use the Brev CLI to port forward your Brev workspace port to your localhost. See below:","title":".brev/ports.yaml"},{"location":"tutorials/","text":"Tutorials Automatically set up Brev machines Configure a Brev machine to automatically set itself up on startup","title":"Tutorials"},{"location":"tutorials/#tutorials","text":"","title":"Tutorials"},{"location":"tutorials/#automatically-set-up-brev-machines","text":"Configure a Brev machine to automatically set itself up on startup","title":"Automatically set up Brev machines"}]}