{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Brev! \ud83e\udd19 Brev is a cloud computer for local development. Use your local tools with a dedicated cloud computer. Getting Started Download the CLI brew install brevdev/homebrew-brev/brev Create an account: brev login This will create an account if you don't have one and prompt you to create an SSH key Create your first workspace brev start <git_url> Note, running this the first time might take a few minutes. Startup times will increase with the next major release (Eta March 2022). Connect your computer to your cluster Brev creates a connection from your local computer to your cluster by running the background daemon brev run-tasks -d Start Coding! \ud83e\udd19 You are now ready to ssh into your workspace! You can find it by running brev ls Open VS Code to your workspace with brev open workspace_name Follow the guide here for Jetbrains products Make your environment reproducible Create your .brev/setup.sh script to make your environment reproducible. If your repo contains a .brev/setup.sh script, Brev will automatically run it when creating the workspace. We automatically create the setup script for you. Populate it and commit it to your repo. Read more here (Optional) Configure brev to autostart ssh proxy daemon so you don't have to run run-tasks on boot. If you run into any issues, run brev refresh . Not sure what your workspace is called? Try brev ls . Wrong organization? Try brev ls orgs and then brev set <org_name> . View the full CLI docs here , and reach out to us in the Discord for help! We're here for anything you need. Build something great \ud83e\udd19","title":"Welcome to Brev! \ud83e\udd19"},{"location":"#welcome-to-brev","text":"Brev is a cloud computer for local development. Use your local tools with a dedicated cloud computer.","title":"Welcome to Brev! \ud83e\udd19"},{"location":"#getting-started","text":"Download the CLI brew install brevdev/homebrew-brev/brev Create an account: brev login This will create an account if you don't have one and prompt you to create an SSH key Create your first workspace brev start <git_url> Note, running this the first time might take a few minutes. Startup times will increase with the next major release (Eta March 2022). Connect your computer to your cluster Brev creates a connection from your local computer to your cluster by running the background daemon brev run-tasks -d Start Coding! \ud83e\udd19 You are now ready to ssh into your workspace! You can find it by running brev ls Open VS Code to your workspace with brev open workspace_name Follow the guide here for Jetbrains products Make your environment reproducible Create your .brev/setup.sh script to make your environment reproducible. If your repo contains a .brev/setup.sh script, Brev will automatically run it when creating the workspace. We automatically create the setup script for you. Populate it and commit it to your repo. Read more here (Optional) Configure brev to autostart ssh proxy daemon so you don't have to run run-tasks on boot. If you run into any issues, run brev refresh . Not sure what your workspace is called? Try brev ls . Wrong organization? Try brev ls orgs and then brev set <org_name> . View the full CLI docs here , and reach out to us in the Discord for help! We're here for anything you need. Build something great \ud83e\udd19","title":"Getting Started"},{"location":"howto/","text":"How To Common .Brev Installations Cheatsheet for common installations for your .brev setup script Find your localhost Looking for your localhost url? Make a Port Public Remove auth from your localhost Environment Variables in Setup Script How to add environment variables in your setup script Reset Your Machine to Troubleshoot You can reset your Brev machine and get a newly configured one to troubleshoot. Connect to a workspace with emacs with Jetbrains IDEs with VS Code Organization Management Create an org Invite a user to your org","title":"Home"},{"location":"howto/#how-to","text":"","title":"How To"},{"location":"howto/#common-brev-installations","text":"Cheatsheet for common installations for your .brev setup script","title":"Common .Brev Installations"},{"location":"howto/#find-your-localhost","text":"Looking for your localhost url?","title":"Find your localhost"},{"location":"howto/#make-a-port-public","text":"Remove auth from your localhost","title":"Make a Port Public"},{"location":"howto/#environment-variables-in-setup-script","text":"How to add environment variables in your setup script","title":"Environment Variables in Setup Script"},{"location":"howto/#reset-your-machine-to-troubleshoot","text":"You can reset your Brev machine and get a newly configured one to troubleshoot.","title":"Reset Your Machine to Troubleshoot"},{"location":"howto/#connect-to-a-workspace","text":"with emacs with Jetbrains IDEs with VS Code","title":"Connect to a workspace"},{"location":"howto/#organization-management","text":"Create an org Invite a user to your org","title":"Organization Management"},{"location":"howto/automatically-set-up/","text":"How To Automatically set up Brev machines with .brev setup script. Specify software and dependencies that are required for your project. Creating a .brev setup script for each Brev project will standardize dependencies, packages and tools across all developers contributing to the same project (ex. Node v14, Yarn v1.22) Below are common installations for your convenience. Add them to your root project directory at /.brev/setup.sh Install Yarn ##### Yarn ##### ( echo \"\" ; echo \"##### Yarn #####\" ; echo \"\" ; ) curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list sudo apt update sudo apt install -y yarn Install Rust #### RUST ##### ( echo \"\" ; echo \"##### Rust #####\" ; echo \"\" ; ) curl https://sh.rustup.rs -sSf | sh -s -- -y Install Homebrew ##### Homebrew ##### ( echo \"\" ; echo \"##### Homebrew #####\" ; echo \"\" ; ) curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh | bash - echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"' >> /home/brev/.bash_profile echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"' >> /home/brev/.zshrc eval \" $( /home/linuxbrew/.linuxbrew/bin/brew shellenv ) \" Node ##### Node v14.x + npm ##### ( echo \"\" ; echo \"##### Node v14.x + npm #####\" ; echo \"\" ; ) sudo apt install ca-certificates curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash - sudo apt-get install -y nodejs Install NPM Packages Without Sudo # install npm packages globally without sudo # modified from https://stackoverflow.com/questions/18088372/how-to-npm-install-global-not-as-root mkdir \" ${ HOME } /.npm-packages\" printf \"prefix= ${ HOME } /.npm-packages\" >> $HOME /.npmrc cat <<EOF | tee -a ~/.bashrc | tee -a ~/.zshrc NPM_PACKAGES=\"\\${HOME}/.npm-packages\" NODE_PATH=\"\\${NPM_PACKAGES}/lib/node_modules:\\${NODE_PATH}\" PATH=\"\\${NPM_PACKAGES}/bin:\\${PATH}\" # Unset manpath so we can inherit from /etc/manpath via the `manpath` # command unset MANPATH # delete if you already modified MANPATH elsewhere in your config MANPATH=\"\\${NPM_PACKAGES}/share/man:\\$(manpath)\" EOF Python, Pip, and Poetry ##### Python + Pip + Poetry ##### ( echo \"\" ; echo \"##### Python + Pip + Poetry #####\" ; echo \"\" ; ) sudo apt-get install -y python3-distutils sudo apt-get install -y python3-apt curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3 - curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py rm get-pip.py echo \"\" >> ~/.zshrc echo \"export PATH=/home/brev/.local/bin: $PATH \" >> ~/.zshrc echo \"\" >> ~/.bashrc echo \"export PATH=/home/brev/.local/bin: $PATH \" >> ~/.bashrc source ~/.zshrc source ~/.bashrc source $HOME /.poetry/env Golang ##### Golang v16x ##### ( echo \"\" ; echo \"##### Golang v16x #####\" ; echo \"\" ; ) wget https://golang.org/dl/go1.16.7.linux-amd64.tar.gz sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.16.7.linux-amd64.tar.gz echo \"\" | sudo tee -a ~/.bashrc echo \"export PATH=\\$PATH:/usr/local/go/bin\" | sudo tee -a ~/.bashrc source ~/.bashrc echo \"\" | sudo tee -a ~/.zshrc echo \"export PATH=\\$PATH:/usr/local/go/bin\" | sudo tee -a ~/.zshrc source ~/.zshrc rm go1.16.7.linux-amd64.tar.gz Custom command example We recommend the echo statement before any command for clearer output logs. ##### Custom commands ##### ( echo \"\" ; echo \"##### Custom commands #####\" ; echo \"\" ; ) npm install","title":"Common Installations"},{"location":"howto/automatically-set-up/#how-to","text":"","title":"How To"},{"location":"howto/automatically-set-up/#automatically-set-up-brev-machines-with-brev-setup-script","text":"Specify software and dependencies that are required for your project. Creating a .brev setup script for each Brev project will standardize dependencies, packages and tools across all developers contributing to the same project (ex. Node v14, Yarn v1.22) Below are common installations for your convenience. Add them to your root project directory at /.brev/setup.sh","title":"Automatically set up Brev machines with .brev setup script."},{"location":"howto/automatically-set-up/#install-yarn","text":"##### Yarn ##### ( echo \"\" ; echo \"##### Yarn #####\" ; echo \"\" ; ) curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list sudo apt update sudo apt install -y yarn","title":"Install Yarn"},{"location":"howto/automatically-set-up/#install-rust","text":"#### RUST ##### ( echo \"\" ; echo \"##### Rust #####\" ; echo \"\" ; ) curl https://sh.rustup.rs -sSf | sh -s -- -y","title":"Install Rust"},{"location":"howto/automatically-set-up/#install-homebrew","text":"##### Homebrew ##### ( echo \"\" ; echo \"##### Homebrew #####\" ; echo \"\" ; ) curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh | bash - echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"' >> /home/brev/.bash_profile echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"' >> /home/brev/.zshrc eval \" $( /home/linuxbrew/.linuxbrew/bin/brew shellenv ) \"","title":"Install Homebrew"},{"location":"howto/automatically-set-up/#node","text":"##### Node v14.x + npm ##### ( echo \"\" ; echo \"##### Node v14.x + npm #####\" ; echo \"\" ; ) sudo apt install ca-certificates curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash - sudo apt-get install -y nodejs","title":"Node"},{"location":"howto/automatically-set-up/#install-npm-packages-without-sudo","text":"# install npm packages globally without sudo # modified from https://stackoverflow.com/questions/18088372/how-to-npm-install-global-not-as-root mkdir \" ${ HOME } /.npm-packages\" printf \"prefix= ${ HOME } /.npm-packages\" >> $HOME /.npmrc cat <<EOF | tee -a ~/.bashrc | tee -a ~/.zshrc NPM_PACKAGES=\"\\${HOME}/.npm-packages\" NODE_PATH=\"\\${NPM_PACKAGES}/lib/node_modules:\\${NODE_PATH}\" PATH=\"\\${NPM_PACKAGES}/bin:\\${PATH}\" # Unset manpath so we can inherit from /etc/manpath via the `manpath` # command unset MANPATH # delete if you already modified MANPATH elsewhere in your config MANPATH=\"\\${NPM_PACKAGES}/share/man:\\$(manpath)\" EOF","title":"Install NPM Packages Without Sudo"},{"location":"howto/automatically-set-up/#python-pip-and-poetry","text":"##### Python + Pip + Poetry ##### ( echo \"\" ; echo \"##### Python + Pip + Poetry #####\" ; echo \"\" ; ) sudo apt-get install -y python3-distutils sudo apt-get install -y python3-apt curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3 - curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py rm get-pip.py echo \"\" >> ~/.zshrc echo \"export PATH=/home/brev/.local/bin: $PATH \" >> ~/.zshrc echo \"\" >> ~/.bashrc echo \"export PATH=/home/brev/.local/bin: $PATH \" >> ~/.bashrc source ~/.zshrc source ~/.bashrc source $HOME /.poetry/env","title":"Python, Pip, and Poetry"},{"location":"howto/automatically-set-up/#golang","text":"##### Golang v16x ##### ( echo \"\" ; echo \"##### Golang v16x #####\" ; echo \"\" ; ) wget https://golang.org/dl/go1.16.7.linux-amd64.tar.gz sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.16.7.linux-amd64.tar.gz echo \"\" | sudo tee -a ~/.bashrc echo \"export PATH=\\$PATH:/usr/local/go/bin\" | sudo tee -a ~/.bashrc source ~/.bashrc echo \"\" | sudo tee -a ~/.zshrc echo \"export PATH=\\$PATH:/usr/local/go/bin\" | sudo tee -a ~/.zshrc source ~/.zshrc rm go1.16.7.linux-amd64.tar.gz","title":"Golang"},{"location":"howto/automatically-set-up/#custom-command-example","text":"We recommend the echo statement before any command for clearer output logs. ##### Custom commands ##### ( echo \"\" ; echo \"##### Custom commands #####\" ; echo \"\" ; ) npm install","title":"Custom command example"},{"location":"howto/configure-ssh-proxy-daemon-at-boot/","text":"How To Configure ssh proxy to start at Boot Make sure that you have installed the cli Mac OS Add the following configuration to ~/Library/LaunchAgents/dev.brev.plist . If the directory ~/Library/LaunchAgents/ does not exist, you can create it with $ mkdir -p ~/Library/LaunchAgents/ <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist version= \"1.0\" > <dict> <key> Label </key> <string> dev.brev </string> <key> ProgramArguments </key> <array> <string> brev </string> <string> run-tasks </string> </array> <key> KeepAlive </key> <true/> </dict> </plist> start the service with: launchctl bootstrap gui/ $UID ~/Library/LaunchAgents/dev.brev.plist check to see that it worked by runnning launchctl list | grep brev which should show output similar to: 4203 0 dev.brev Linux Add the the following configuration to /etc/systemd/user/brev.service or $HOME/.config/systemd/user/brev.service [Install] WantedBy = multi-user.target [Unit] Description = Brev SSH Proxy Daemon After = systend-user-sessions.service [Service] Type = simple ExecStart = brev run-tasks Restart = always enable and start the daemon by running : $ systemctl --user enable brev $ systemctl --user start brev check status with $ systemctl --user status brev and you should see an output similar to: \u25cf brev.service - Brev SSH Proxy Daemon Loaded: loaded ( /etc/xdg/systemd/user/brev.service ; disabled ; vendor preset: enabled ) Active: active ( running ) since Tue 2022 -01-18 19 :03:49 PST ; 3s ago Main PID: 264331 ( brev ) Tasks: 11 ( limit: 47870 ) Memory: 8 .8M CPU: 59ms CGroup: /user.slice/user-1000.slice/user@1000.service/app.slice/brev.service \u2514\u2500264331 /opt/brev/bin/brev run-tasks Jan 18 19 :03:49 pop-os systemd [ 4294 ] : Started Brev SSH Proxy Daemon. Jan 18 19 :03:51 pop-os brev [ 264331 ] : 2022 /01/18 19 :03:51 creating new ssh config Jan 18 19 :03:51 pop-os brev [ 264331 ] : 2022 /01/18 19 :03:51 ensuring has include","title":"Configure SSH Proxy Daemon at Boot"},{"location":"howto/configure-ssh-proxy-daemon-at-boot/#how-to","text":"","title":"How To"},{"location":"howto/configure-ssh-proxy-daemon-at-boot/#configure-ssh-proxy-to-start-at-boot","text":"Make sure that you have installed the cli","title":"Configure ssh proxy to start at Boot"},{"location":"howto/configure-ssh-proxy-daemon-at-boot/#mac-os","text":"Add the following configuration to ~/Library/LaunchAgents/dev.brev.plist . If the directory ~/Library/LaunchAgents/ does not exist, you can create it with $ mkdir -p ~/Library/LaunchAgents/ <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist version= \"1.0\" > <dict> <key> Label </key> <string> dev.brev </string> <key> ProgramArguments </key> <array> <string> brev </string> <string> run-tasks </string> </array> <key> KeepAlive </key> <true/> </dict> </plist> start the service with: launchctl bootstrap gui/ $UID ~/Library/LaunchAgents/dev.brev.plist check to see that it worked by runnning launchctl list | grep brev which should show output similar to: 4203 0 dev.brev","title":"Mac OS"},{"location":"howto/configure-ssh-proxy-daemon-at-boot/#linux","text":"Add the the following configuration to /etc/systemd/user/brev.service or $HOME/.config/systemd/user/brev.service [Install] WantedBy = multi-user.target [Unit] Description = Brev SSH Proxy Daemon After = systend-user-sessions.service [Service] Type = simple ExecStart = brev run-tasks Restart = always enable and start the daemon by running : $ systemctl --user enable brev $ systemctl --user start brev check status with $ systemctl --user status brev and you should see an output similar to: \u25cf brev.service - Brev SSH Proxy Daemon Loaded: loaded ( /etc/xdg/systemd/user/brev.service ; disabled ; vendor preset: enabled ) Active: active ( running ) since Tue 2022 -01-18 19 :03:49 PST ; 3s ago Main PID: 264331 ( brev ) Tasks: 11 ( limit: 47870 ) Memory: 8 .8M CPU: 59ms CGroup: /user.slice/user-1000.slice/user@1000.service/app.slice/brev.service \u2514\u2500264331 /opt/brev/bin/brev run-tasks Jan 18 19 :03:49 pop-os systemd [ 4294 ] : Started Brev SSH Proxy Daemon. Jan 18 19 :03:51 pop-os brev [ 264331 ] : 2022 /01/18 19 :03:51 creating new ssh config Jan 18 19 :03:51 pop-os brev [ 264331 ] : 2022 /01/18 19 :03:51 ensuring has include","title":"Linux"},{"location":"howto/connect-via-emacs/","text":"Connect to a Brev workspace using Emacs Make sure you have the Brev CLI installed In emacs execute M-x dired RET and enter the directory /ssh:<workspace-name>:/home/brev/workspace/vue-coffee You'll need to have a running workspace. If you don't have one yet: Deploy a new workspace with brev start $ brev start https://github.com/just-fine/vue-coffee Workspace is starting. This can take up to 2 minutes the first time. \u28fb workspace is deploying Your workspace is ready! SSH into your machine: ssh just-fine/vue-coffee That's it! \ud83e\udd19","title":"Connect Via Emacs"},{"location":"howto/connect-via-emacs/#connect-to-a-brev-workspace-using-emacs","text":"Make sure you have the Brev CLI installed In emacs execute M-x dired RET and enter the directory /ssh:<workspace-name>:/home/brev/workspace/vue-coffee You'll need to have a running workspace. If you don't have one yet: Deploy a new workspace with brev start $ brev start https://github.com/just-fine/vue-coffee Workspace is starting. This can take up to 2 minutes the first time. \u28fb workspace is deploying Your workspace is ready! SSH into your machine: ssh just-fine/vue-coffee That's it! \ud83e\udd19","title":"Connect to a Brev workspace using Emacs"},{"location":"howto/connect-via-jetbrains/","text":"Connect to a Brev workspace using JetBrains Make sure you have the Brev CLI installed This includes Webstorm, GoLand, IntelliJ IDEA, PyCharm etc. You will need to open JetBrains Gateway instead of your locally installed JetBrains IDE. It will install the language process server and other heavyweight processes on the remote machine, while exposing the client of the IDE to you. We guide you through this process the first time you download the CLI, but a link to manually download the software is here: jetbrains.com/remote-development/gateway Run brev jetbrains in your terminal. Only for Jetbrains products, this process needs to stay running to maintains the connection to your computer. Our next major release gets rid of this step (eta 2 weeks-- March 2022). Open JetBrains Gateway and select \"Connect Via SSH\". Your Brev machines should already be listed for you! Select the correct machine and click \"Check Connection and Continue\". If you do not see your brev machine, skip to the end of this to manually add ssh connection details \ud83d\udc47 Select the IDE you'd like to use. Enter the project directory. This will always be /home/brev/workspace/<GIT_REPO_OR_PROJECT_NAME> . If you don't know the GIT_REPO_OR_PROJECT_NAME, simply click on the folder icon to find the correct folder. Click Download and Start IDE! That's it! Do It Manually To manually add SSH connection details: Select <New Connection> from the Connection dropdown Enter the following information: Username: brev Host: localhost Private Key: <ROOT>/.brev/brev.pem . ROOT is ~, in Mac this would be /Users/<USERNAME> . You must enter the absolute path, relative paths will not work. Save Passphrase: Unchecked Port: Select the port of the brev project displayed in your terminal after entering brev up. See example below: Go back to step 3) and continue from there \ud83d\ude42","title":"Connect Via Jetbrains"},{"location":"howto/connect-via-jetbrains/#connect-to-a-brev-workspace-using-jetbrains","text":"Make sure you have the Brev CLI installed This includes Webstorm, GoLand, IntelliJ IDEA, PyCharm etc. You will need to open JetBrains Gateway instead of your locally installed JetBrains IDE. It will install the language process server and other heavyweight processes on the remote machine, while exposing the client of the IDE to you. We guide you through this process the first time you download the CLI, but a link to manually download the software is here: jetbrains.com/remote-development/gateway Run brev jetbrains in your terminal. Only for Jetbrains products, this process needs to stay running to maintains the connection to your computer. Our next major release gets rid of this step (eta 2 weeks-- March 2022). Open JetBrains Gateway and select \"Connect Via SSH\". Your Brev machines should already be listed for you! Select the correct machine and click \"Check Connection and Continue\". If you do not see your brev machine, skip to the end of this to manually add ssh connection details \ud83d\udc47 Select the IDE you'd like to use. Enter the project directory. This will always be /home/brev/workspace/<GIT_REPO_OR_PROJECT_NAME> . If you don't know the GIT_REPO_OR_PROJECT_NAME, simply click on the folder icon to find the correct folder. Click Download and Start IDE! That's it!","title":"Connect to a Brev workspace using JetBrains"},{"location":"howto/connect-via-jetbrains/#do-it-manually","text":"To manually add SSH connection details: Select <New Connection> from the Connection dropdown Enter the following information: Username: brev Host: localhost Private Key: <ROOT>/.brev/brev.pem . ROOT is ~, in Mac this would be /Users/<USERNAME> . You must enter the absolute path, relative paths will not work. Save Passphrase: Unchecked Port: Select the port of the brev project displayed in your terminal after entering brev up. See example below: Go back to step 3) and continue from there \ud83d\ude42","title":"Do It Manually"},{"location":"howto/connect-via-vscode/","text":"Connect to a Brev workspace using VSCode Make sure you have the Brev CLI installed Open VS Code and use the Remote - SSH extension to access the remote machine. Download the Remote - SSH extension extension With the extension downloaded, open the command palette and type in ssh. Select Remote-SSH: Connect to Host... Select your workspace, and that's it! By the way, if you're connecting to a workspace that you've connected to in the past, you can open up directly to the folder: Click on the Remote Explorer icon Click on the folder icon for the workspace you want to connect to","title":"Connect Via VSCode"},{"location":"howto/connect-via-vscode/#connect-to-a-brev-workspace-using-vscode","text":"Make sure you have the Brev CLI installed Open VS Code and use the Remote - SSH extension to access the remote machine. Download the Remote - SSH extension extension With the extension downloaded, open the command palette and type in ssh. Select Remote-SSH: Connect to Host... Select your workspace, and that's it! By the way, if you're connecting to a workspace that you've connected to in the past, you can open up directly to the folder: Click on the Remote Explorer icon Click on the folder icon for the workspace you want to connect to","title":"Connect to a Brev workspace using VSCode"},{"location":"howto/create-org/","text":"Create a Brev Organization You can create a Brev organization in the Brev dashboard . From the Organization dropdown at the top, click Create New Organization . Give it a name, and click Create!","title":"Create an Organization"},{"location":"howto/create-org/#create-a-brev-organization","text":"You can create a Brev organization in the Brev dashboard . From the Organization dropdown at the top, click Create New Organization . Give it a name, and click Create!","title":"Create a Brev Organization"},{"location":"howto/env-vars-dot-brev/","text":"How To Environment Variables in the Setup Script The .brev scripts executes once a Brev machine is provisioned, but are not preserved. You must instead add environment variables to a ~/.bashrc or ~/.zshrc file that gets sourced. For example, to install python's package manager pip which requires modifying the path, you'll need to first install pip: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py rm get-pip.py You'll need to instead put this new path in your zshrc and bashrc and source both files. printf \"\\n%s\\n\" \"export PATH=/home/brev/.local/bin: $PATH \" | tee -a ~/.bashrc | tee -a ~/.zshrc # Instead of exporting the variable: # export PATH=/home/brev/.local/bin:$PATH Here's the full snipped to add to .brev for properly installing pip: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py rm get-pip.py echo \"\" >> ~/.zshrc echo \"export PATH=/home/brev/.local/bin: $PATH \" >> ~/.zshrc echo \"\" >> ~/.bashrc echo \"export PATH=/home/brev/.local/bin: $PATH \" >> ~/.bashrc source ~/.zshrc source ~/.bashrc","title":"Environment Variables"},{"location":"howto/env-vars-dot-brev/#how-to","text":"","title":"How To"},{"location":"howto/env-vars-dot-brev/#environment-variables-in-the-setup-script","text":"The .brev scripts executes once a Brev machine is provisioned, but are not preserved. You must instead add environment variables to a ~/.bashrc or ~/.zshrc file that gets sourced. For example, to install python's package manager pip which requires modifying the path, you'll need to first install pip: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py rm get-pip.py You'll need to instead put this new path in your zshrc and bashrc and source both files. printf \"\\n%s\\n\" \"export PATH=/home/brev/.local/bin: $PATH \" | tee -a ~/.bashrc | tee -a ~/.zshrc # Instead of exporting the variable: # export PATH=/home/brev/.local/bin:$PATH Here's the full snipped to add to .brev for properly installing pip: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py rm get-pip.py echo \"\" >> ~/.zshrc echo \"export PATH=/home/brev/.local/bin: $PATH \" >> ~/.zshrc echo \"\" >> ~/.bashrc echo \"export PATH=/home/brev/.local/bin: $PATH \" >> ~/.bashrc source ~/.zshrc source ~/.bashrc","title":"Environment Variables in the Setup Script"},{"location":"howto/find-my-localhost/","text":"How To Find my localhost If you're using the CLI and local tools, see the port-forward command If you're inside your Brev workspace and are running something on localhost, you can access it using your workspace URL. From the dashboard, copy your url: Prefix the url with your port number + \"-\" and that's your url! For example: If your workspace url is jelly-brevdev.brev.sh and you're running on localhost:3000 your localhost url is 3000-jelly-brevdev.brev.sh .","title":"Find Your Localhost"},{"location":"howto/find-my-localhost/#how-to","text":"","title":"How To"},{"location":"howto/find-my-localhost/#find-my-localhost","text":"If you're using the CLI and local tools, see the port-forward command If you're inside your Brev workspace and are running something on localhost, you can access it using your workspace URL. From the dashboard, copy your url: Prefix the url with your port number + \"-\" and that's your url! For example: If your workspace url is jelly-brevdev.brev.sh and you're running on localhost:3000 your localhost url is 3000-jelly-brevdev.brev.sh .","title":"Find my localhost"},{"location":"howto/invite-users-to-org/","text":"Invite Users to Your Organization You can invite users to your organization from the org settings page in the Brev dashboard From the Organization dropdown at the top, click on the gear \u2699\ufe0f for your organization. Click on the Invite a Collaborator button Type in a valid username in, select the permission scope, and click Add User .","title":"Invite Users to Your Organization"},{"location":"howto/invite-users-to-org/#invite-users-to-your-organization","text":"You can invite users to your organization from the org settings page in the Brev dashboard From the Organization dropdown at the top, click on the gear \u2699\ufe0f for your organization. Click on the Invite a Collaborator button Type in a valid username in, select the permission scope, and click Add User .","title":"Invite Users to Your Organization"},{"location":"howto/make-port-public/","text":"How To Make a port public If you're accessing your localhost url such as 3000-jelly-brevdev.brev.sh , you'll notice it requires your password. If you want to remove auth to use Postman, consume the endpoint in your frontend, or just show your mom what you built, you can do so in the .brev/ports.yaml added to every Brev workspace. Add the port you wish to expose in the list and that's it! Note: the version field is optional. It could be useful if you choose to commit this to your project repo.","title":"Make a Port Public"},{"location":"howto/make-port-public/#how-to","text":"","title":"How To"},{"location":"howto/make-port-public/#make-a-port-public","text":"If you're accessing your localhost url such as 3000-jelly-brevdev.brev.sh , you'll notice it requires your password. If you want to remove auth to use Postman, consume the endpoint in your frontend, or just show your mom what you built, you can do so in the .brev/ports.yaml added to every Brev workspace. Add the port you wish to expose in the list and that's it! Note: the version field is optional. It could be useful if you choose to commit this to your project repo.","title":"Make a port public"},{"location":"howto/secret-variables/","text":"How To Securely use secret variables If you're building with services such as AWS, you'll need a secure place for credentials and configs, such as those in the ~/.aws directory on your computer. Brev has an encrypted secrets manager for these types of variables. Go to your Account page on the Brev dashboard for the encrypted secrets manger Click on \"New Secret and populate the form accordingly. You can load environment variables or change the type from \"Environment Variables\" to \"File\" for something like the .aws/credentials file (as shown in the picture). Setting secrets or environment variables for your organization The example above sets your personal secret for all of your Brev workspaces. If you wish to set a variable or secret for your entire org, go to your organization's settings from the organization drop down and use the encrypted secret manager there.","title":"Encrypted Secrets"},{"location":"howto/secret-variables/#how-to","text":"Securely use secret variables If you're building with services such as AWS, you'll need a secure place for credentials and configs, such as those in the ~/.aws directory on your computer. Brev has an encrypted secrets manager for these types of variables. Go to your Account page on the Brev dashboard for the encrypted secrets manger Click on \"New Secret and populate the form accordingly. You can load environment variables or change the type from \"Environment Variables\" to \"File\" for something like the .aws/credentials file (as shown in the picture).","title":"How To"},{"location":"howto/secret-variables/#setting-secrets-or-environment-variables-for-your-organization","text":"The example above sets your personal secret for all of your Brev workspaces. If you wish to set a variable or secret for your entire org, go to your organization's settings from the organization drop down and use the encrypted secret manager there.","title":"Setting secrets or environment variables for your organization"},{"location":"howto/troubleshoot-reset/","text":"How To Reset Your Machine If you setup your .brev directory , you can easily dispose of machines if they get into a bad state. Your fresh machine will come configured, so you can freely reset when you encounter problems. You can reset your workspace by going to workspace settings and clicking the 'reset' button in the Danger Zone. Note: Resetting your workspace will delete all files that aren't committed or in the .brev directory.","title":"Troubleshoot Reset"},{"location":"howto/troubleshoot-reset/#how-to","text":"","title":"How To"},{"location":"howto/troubleshoot-reset/#reset-your-machine","text":"If you setup your .brev directory , you can easily dispose of machines if they get into a bad state. Your fresh machine will come configured, so you can freely reset when you encounter problems. You can reset your workspace by going to workspace settings and clicking the 'reset' button in the Danger Zone. Note: Resetting your workspace will delete all files that aren't committed or in the .brev directory.","title":"Reset Your Machine"},{"location":"reference/","text":"Reference Brev creates your powerful computer in the cloud for development. Everything has moved to the cloud except your development, which doesn't make a ton of sense since development has the most to benefit from the cloud: unlimited ram and CPU instant upgrades to the latest and greatest hardware no more wasting time with machine configurations get a public url for anything you're working on: APIs, front ends, etc. Brev is not a streamed computer-- it's a service that configures your powerful cloud computer for you to build anything with. You are the superuser on your Brev machine. The .brev directory Brev solves configurations with the .brev directory. There are two types of configurations: Personal dev configs, such as Zsh vs Bash, light mode vs dark mode, keybindings, and certain extensions Repo configs, such as node version, python version, any specific installation/set up/onboarding instructions. Personal .brev For the first type of configs, go to your Account and update the Workspace Settings Repo. You'll need a git repo that just contains a .brev/setup.sh file. Fork this repo as a good place to start. Project .brev Automatically configure your project for any new contributor by commiting a .brev/setup.sh to the code repository. Brev will automatically execute the script for every new workspace created. Brev automatically creates the .brev/setup.sh if it doesn't exist.","title":"Home"},{"location":"reference/#reference","text":"Brev creates your powerful computer in the cloud for development. Everything has moved to the cloud except your development, which doesn't make a ton of sense since development has the most to benefit from the cloud: unlimited ram and CPU instant upgrades to the latest and greatest hardware no more wasting time with machine configurations get a public url for anything you're working on: APIs, front ends, etc. Brev is not a streamed computer-- it's a service that configures your powerful cloud computer for you to build anything with. You are the superuser on your Brev machine.","title":"Reference"},{"location":"reference/#the-brev-directory","text":"Brev solves configurations with the .brev directory. There are two types of configurations: Personal dev configs, such as Zsh vs Bash, light mode vs dark mode, keybindings, and certain extensions Repo configs, such as node version, python version, any specific installation/set up/onboarding instructions.","title":"The .brev directory"},{"location":"reference/#personal-brev","text":"For the first type of configs, go to your Account and update the Workspace Settings Repo. You'll need a git repo that just contains a .brev/setup.sh file. Fork this repo as a good place to start.","title":"Personal .brev"},{"location":"reference/#project-brev","text":"Automatically configure your project for any new contributor by commiting a .brev/setup.sh to the code repository. Brev will automatically execute the script for every new workspace created. Brev automatically creates the .brev/setup.sh if it doesn't exist.","title":"Project .brev"},{"location":"reference/brev-cli/","text":"Brev CLI The Brev CLI is the preferred interface for Brev, allowing you to use cloud computers with your local development tools. Our goal is to be as invisible as possible. Getting Started Start by downloading the CLI: if brew is not already installed on your computer install it with /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" then add Brev's tap and install brev with brew install brevdev/homebrew-brev/brev Run brev login . If you don't already have an account, this will create one and prompt you to create an SSH key. Your account must be verified to create a workspace. You can verify by putting a credit card on file (we'll never charge you without your permission) or just message us in the Discord . Use the start command to create your first workspace. Note, running this the first time might take a few minutes. We're aware of this issue and are working on it. brev start <git_url> Configure brev to autostart ssh proxy daemon If you run into any issues, run brev refresh . Not sure what your workspace is called? Try brev ls . Wrong organization? Try brev ls orgs and then brev set <org_name> . View the full CLI docs below, and reach out to us in the Discord for help! We're here for anything you need. Build something great \ud83e\udd19 Brev CLI Reference Brev CLI commands are broken up into 4 categories Workspace commands, Context commands, SSH commands, and Housekeeping commands. Workspace Commands delete If you no longer need a machine, and you'd like an action more permanent than stop , you can delete the workspace. brev delete workspace_name reset If you're experiencing any machine problems, including self-inflicted ones like installing conflicting or incorrect software versions, rather than wasting time debugging, just bite the bullet. This command deletes your machine and gets you a fresh one. Make sure to have a .brev setup script or you'll have to reinstall everythign manually. **Note: even if not committed, the .brev/setup.sh script will persist because everythign in /home/workspace will be saved. run-tasks This starts the brev daemon. This should be automatically running in the background. This daemon manages the connection between your local computer and each of your remote machines. If you'd like to manually start brev, simply run brev run-tasks . If you'd like to make this a background process, add a -d to the end. brev run-tasks -d This will have to be run every time you reboot unless you configure autostart start Create a new workspace from a git URL or to start a stopped workspace. Supplying a git url, brev start git_url will create a new workspace with the git url cloned. Create a .brev directory and anyone can get their own workspace that comes configured for immediate development. When viewed from the web dashboard, workspaces within an org become projects, allowing your organization's members to get their own cloned workspace with one click. If you have a Brev workspace in a stopped state, run brev start workspace_name to start it up again. Note, this might take a minute or two. stop If you don't plan on using your Brev workspace, you can temporarily pause it by running brev stop workspace_name Everything in /home/workspace will be saved when it boots up again. Context Commands Brev commands run within the context of an organization, this way it's really clear if something is running under your personal account or under your organization's. Most commands support an --active-org flag for scripting purposes. ls Print a tabular view of your workspaces or orgs # print orgs brev ls orgs # print workspaces within active organization brev ls # print workspaces within any organization brev ls --org org_name set Set the organization context for your commands. brev set <org name> SSH Commands Brev aims to be as invisible as possible, letting developers code locally with the benefits of cloud compute. The commands in this section will evolve to happen in the background as much as makes sense. port-forward You can always access the localhost URL of your workspace via the public url , or you can port-forward your remote localhost to a local one. Run brev port-forward workspace_name --port localport:remoteport For example, to run the brev docs on port 3000: brev port-forward brev-docs --port 3000 :3000 This command runs interactive if the ports flag is left off. Housekeeping Commands jetbrains Jetbrains, unfortunately, doesn't use the standard SSH file, and instead uses a custom XML file. To establish a connection between your local computer and all of the workspaces in your organization, run: brev jetbrains This command runs a helper proxy for jetbrains products that allows your jetbrains IDEs ssh access. It does not update if new workspaces are created or deleted, so please stop the process and re-run it to update it. Note: this will hold your shell. Keep this process running to keep the connection live. If there's a timeout for whatever reason, please ctrl+c and re-run brev jetbrains . login Authenticate yourself with brev login This will create an account if you don't already have one. logout Remove your keys and logout brev logout profile If you have personal settings, such as aliases or shortcuts in your ~/.zshrc or ~/.bash_profile , you can sync them with Brev.dev to make sure every workspace you create has them. Create a git repo with setup script at ~.brev/setup.sh or fork our example here . Once your setup is copied over, add it to your profile with brev profile --set-personal-config _git_repo_url_ refresh As a troubleshooting measure, you can force the cache to refresh if you suspect they're stale. brev refresh secret Use the encrypted secrets manager to load secret files and environment variables into your workspace, or set them for the entire org. Run the command in interactive mode by ommitting the flags brev secret A secret file or environment variable needs a name and a value, the scope to be set (org or private), a type (variable or file). If the secret is a file, you'll also need to supply the path Ex: personal environment variable brev secret --name SERVER_URL --value https://brev.sh --type variable --scope personal Ex: personal AWS credentials file brev secret --name AWS_KEY --value ... --type file --file-path --scope personal ssh-key Get your ssh keys to add to your git provider. brev ssh-key Quick links to add it to Github or Gitlab","title":"CLI Docs"},{"location":"reference/brev-cli/#brev-cli","text":"The Brev CLI is the preferred interface for Brev, allowing you to use cloud computers with your local development tools. Our goal is to be as invisible as possible.","title":"Brev CLI"},{"location":"reference/brev-cli/#getting-started","text":"Start by downloading the CLI: if brew is not already installed on your computer install it with /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" then add Brev's tap and install brev with brew install brevdev/homebrew-brev/brev Run brev login . If you don't already have an account, this will create one and prompt you to create an SSH key. Your account must be verified to create a workspace. You can verify by putting a credit card on file (we'll never charge you without your permission) or just message us in the Discord . Use the start command to create your first workspace. Note, running this the first time might take a few minutes. We're aware of this issue and are working on it. brev start <git_url> Configure brev to autostart ssh proxy daemon If you run into any issues, run brev refresh . Not sure what your workspace is called? Try brev ls . Wrong organization? Try brev ls orgs and then brev set <org_name> . View the full CLI docs below, and reach out to us in the Discord for help! We're here for anything you need. Build something great \ud83e\udd19","title":"Getting Started"},{"location":"reference/brev-cli/#brev-cli-reference","text":"Brev CLI commands are broken up into 4 categories Workspace commands, Context commands, SSH commands, and Housekeeping commands.","title":"Brev CLI Reference"},{"location":"reference/brev-cli/#workspace-commands","text":"","title":"Workspace Commands"},{"location":"reference/brev-cli/#delete","text":"If you no longer need a machine, and you'd like an action more permanent than stop , you can delete the workspace. brev delete workspace_name","title":"delete"},{"location":"reference/brev-cli/#reset","text":"If you're experiencing any machine problems, including self-inflicted ones like installing conflicting or incorrect software versions, rather than wasting time debugging, just bite the bullet. This command deletes your machine and gets you a fresh one. Make sure to have a .brev setup script or you'll have to reinstall everythign manually. **Note: even if not committed, the .brev/setup.sh script will persist because everythign in /home/workspace will be saved.","title":"reset"},{"location":"reference/brev-cli/#run-tasks","text":"This starts the brev daemon. This should be automatically running in the background. This daemon manages the connection between your local computer and each of your remote machines. If you'd like to manually start brev, simply run brev run-tasks . If you'd like to make this a background process, add a -d to the end. brev run-tasks -d This will have to be run every time you reboot unless you configure autostart","title":"run-tasks"},{"location":"reference/brev-cli/#start","text":"Create a new workspace from a git URL or to start a stopped workspace. Supplying a git url, brev start git_url will create a new workspace with the git url cloned. Create a .brev directory and anyone can get their own workspace that comes configured for immediate development. When viewed from the web dashboard, workspaces within an org become projects, allowing your organization's members to get their own cloned workspace with one click. If you have a Brev workspace in a stopped state, run brev start workspace_name to start it up again. Note, this might take a minute or two.","title":"start"},{"location":"reference/brev-cli/#stop","text":"If you don't plan on using your Brev workspace, you can temporarily pause it by running brev stop workspace_name Everything in /home/workspace will be saved when it boots up again.","title":"stop"},{"location":"reference/brev-cli/#context-commands","text":"Brev commands run within the context of an organization, this way it's really clear if something is running under your personal account or under your organization's. Most commands support an --active-org flag for scripting purposes.","title":"Context Commands"},{"location":"reference/brev-cli/#ls","text":"Print a tabular view of your workspaces or orgs # print orgs brev ls orgs # print workspaces within active organization brev ls # print workspaces within any organization brev ls --org org_name","title":"ls"},{"location":"reference/brev-cli/#set","text":"Set the organization context for your commands. brev set <org name>","title":"set"},{"location":"reference/brev-cli/#ssh-commands","text":"Brev aims to be as invisible as possible, letting developers code locally with the benefits of cloud compute. The commands in this section will evolve to happen in the background as much as makes sense.","title":"SSH Commands"},{"location":"reference/brev-cli/#port-forward","text":"You can always access the localhost URL of your workspace via the public url , or you can port-forward your remote localhost to a local one. Run brev port-forward workspace_name --port localport:remoteport For example, to run the brev docs on port 3000: brev port-forward brev-docs --port 3000 :3000 This command runs interactive if the ports flag is left off.","title":"port-forward"},{"location":"reference/brev-cli/#housekeeping-commands","text":"","title":"Housekeeping Commands"},{"location":"reference/brev-cli/#jetbrains","text":"Jetbrains, unfortunately, doesn't use the standard SSH file, and instead uses a custom XML file. To establish a connection between your local computer and all of the workspaces in your organization, run: brev jetbrains This command runs a helper proxy for jetbrains products that allows your jetbrains IDEs ssh access. It does not update if new workspaces are created or deleted, so please stop the process and re-run it to update it. Note: this will hold your shell. Keep this process running to keep the connection live. If there's a timeout for whatever reason, please ctrl+c and re-run brev jetbrains .","title":"jetbrains"},{"location":"reference/brev-cli/#login","text":"Authenticate yourself with brev login This will create an account if you don't already have one.","title":"login"},{"location":"reference/brev-cli/#logout","text":"Remove your keys and logout brev logout","title":"logout"},{"location":"reference/brev-cli/#profile","text":"If you have personal settings, such as aliases or shortcuts in your ~/.zshrc or ~/.bash_profile , you can sync them with Brev.dev to make sure every workspace you create has them. Create a git repo with setup script at ~.brev/setup.sh or fork our example here . Once your setup is copied over, add it to your profile with brev profile --set-personal-config _git_repo_url_","title":"profile"},{"location":"reference/brev-cli/#refresh","text":"As a troubleshooting measure, you can force the cache to refresh if you suspect they're stale. brev refresh","title":"refresh"},{"location":"reference/brev-cli/#secret","text":"Use the encrypted secrets manager to load secret files and environment variables into your workspace, or set them for the entire org. Run the command in interactive mode by ommitting the flags brev secret A secret file or environment variable needs a name and a value, the scope to be set (org or private), a type (variable or file). If the secret is a file, you'll also need to supply the path Ex: personal environment variable brev secret --name SERVER_URL --value https://brev.sh --type variable --scope personal Ex: personal AWS credentials file brev secret --name AWS_KEY --value ... --type file --file-path --scope personal","title":"secret"},{"location":"reference/brev-cli/#ssh-key","text":"Get your ssh keys to add to your git provider. brev ssh-key Quick links to add it to Github or Gitlab","title":"ssh-key"},{"location":"reference/debugging/","text":"Brev Debugging This page has common hurdles or known issues that we're addressing. Reset Brev If you're noticing some workspaces to be missing, use the Brev refresh command to try forcing a refresh to the ssh config and ensuring the daemon is started: brev refresh 500 error when running brev start If you run brev start and see the following 500 error: \u279c ~ brev start https://github.com/brevdev/hello-react Name flag omitted, using auto generated name: brevdev/hello-react Workspace is starting. This can take up to 2 minutes the first time. [ error ] /home/runner/work/brev-cli/brev-cli/pkg/cmd/start/start.go:260 : https://ade5dtvtaa.execute-api.us-east-1.amazonaws.com/api/organizations/ejmrvoj8m/workspaces?utm_source = cli 500 Internal Server Error It is likely that you just deleted the workspace and it is still deleting. Please wait 5 seconds and try again. Workspace version issue If you've used Brev with older version of the CLI, it's likely that your workspaces need to be upgraded. You might see an error like this: workspace of version v1.6.8 is not supported with this cli version \\n upgrade your workspace or downgrade your cli \" There isn't a command to upgrade the workspaces yet, so in the interim, please delete the workspace and create it again. brev delete brev-cli # if someone else in your org has the workspace brev start https://github.com/brevdev/brev-cli or if someone else in your org has the same workspace, you can brev start by name to create your own workspace. Run brev ls --all to see workspaces already in your org. # if someone else in your org has the workspace brev start brev-cli","title":"Debugging"},{"location":"reference/debugging/#brev-debugging","text":"This page has common hurdles or known issues that we're addressing.","title":"Brev Debugging"},{"location":"reference/debugging/#reset-brev","text":"If you're noticing some workspaces to be missing, use the Brev refresh command to try forcing a refresh to the ssh config and ensuring the daemon is started: brev refresh","title":"Reset Brev"},{"location":"reference/debugging/#500-error-when-running-brev-start","text":"If you run brev start and see the following 500 error: \u279c ~ brev start https://github.com/brevdev/hello-react Name flag omitted, using auto generated name: brevdev/hello-react Workspace is starting. This can take up to 2 minutes the first time. [ error ] /home/runner/work/brev-cli/brev-cli/pkg/cmd/start/start.go:260 : https://ade5dtvtaa.execute-api.us-east-1.amazonaws.com/api/organizations/ejmrvoj8m/workspaces?utm_source = cli 500 Internal Server Error It is likely that you just deleted the workspace and it is still deleting. Please wait 5 seconds and try again.","title":"500 error when running brev start"},{"location":"reference/debugging/#workspace-version-issue","text":"If you've used Brev with older version of the CLI, it's likely that your workspaces need to be upgraded. You might see an error like this: workspace of version v1.6.8 is not supported with this cli version \\n upgrade your workspace or downgrade your cli \" There isn't a command to upgrade the workspaces yet, so in the interim, please delete the workspace and create it again. brev delete brev-cli # if someone else in your org has the workspace brev start https://github.com/brevdev/brev-cli or if someone else in your org has the same workspace, you can brev start by name to create your own workspace. Run brev ls --all to see workspaces already in your org. # if someone else in your org has the workspace brev start brev-cli","title":"Workspace version issue"},{"location":"reference/dot-brev-setup-script/","text":"Reference The .brev directory Creating a .brev setup script for each Brev project will standardize dependencies, packages and tools across all developers contributing to the same project (ex. Node v14, Yarn v1.22). Brev will create a /.brev/setup.sh script in your workspace. Commit this to your repo to have it executed for every new Brev machine The setup scripts run from the project directory, so /home/brev/<PROJECT_FOLDER_NAME> .brev/setup.sh This is the main configuration file that runs on your Brev machine, directly after we provision it and before your project is cloned. The working directory when the file is running is /home/brev/<PROJECT_FOLDER_NAME> . Careful not to place user settings in here (like VSCode extensions or settings) unless you want to impose them for every contributor in the project. Sometimes this is desireable, for example, to standardize linting practices across the team. A log file with output from the script. It is located at ./.brev/logs/setup.log . We strongly encourage echo-ing statements into this file when installing new software to know where errors might be located. You can look to setup your .brev directory for a cheatsheet of common installations. Note: Brev only hands over the machine once the setup is complete. This means running an open ended process like starting a server with npm run start in your .brev setup script will appear to be infinitely loading. We're working on a fix, but for now, please do not run open ended processes in this script. .brev/ports.yaml You can specify which ports you want publicly accessible. By default, any connection to your project is password protected. Although this is secure, it prevents testing routes, connecting different services (like a backend and frontend), and publicly sharing your project. Use this file to make your localhost url publicly accessible and share it with others. Be sure to never share your password! For example, if we run a React app on port 3000, we would want to expose port 3000 so we can use 3000-brevurl.brev.sh to access localhost:3000 . Note: often there's a security layer built into the code (for example, user auth) so publicly exposing a port is not a security worry. If there is a security concern with opening a port publicly, you can use the Brev CLI to port forward your Brev workspace port to your localhost. See below:","title":"Setup Scripts (.brev)"},{"location":"reference/dot-brev-setup-script/#reference","text":"","title":"Reference"},{"location":"reference/dot-brev-setup-script/#the-brev-directory","text":"Creating a .brev setup script for each Brev project will standardize dependencies, packages and tools across all developers contributing to the same project (ex. Node v14, Yarn v1.22). Brev will create a /.brev/setup.sh script in your workspace. Commit this to your repo to have it executed for every new Brev machine The setup scripts run from the project directory, so /home/brev/<PROJECT_FOLDER_NAME>","title":"The .brev directory"},{"location":"reference/dot-brev-setup-script/#brevsetupsh","text":"This is the main configuration file that runs on your Brev machine, directly after we provision it and before your project is cloned. The working directory when the file is running is /home/brev/<PROJECT_FOLDER_NAME> . Careful not to place user settings in here (like VSCode extensions or settings) unless you want to impose them for every contributor in the project. Sometimes this is desireable, for example, to standardize linting practices across the team. A log file with output from the script. It is located at ./.brev/logs/setup.log . We strongly encourage echo-ing statements into this file when installing new software to know where errors might be located. You can look to setup your .brev directory for a cheatsheet of common installations. Note: Brev only hands over the machine once the setup is complete. This means running an open ended process like starting a server with npm run start in your .brev setup script will appear to be infinitely loading. We're working on a fix, but for now, please do not run open ended processes in this script.","title":".brev/setup.sh"},{"location":"reference/dot-brev-setup-script/#brevportsyaml","text":"You can specify which ports you want publicly accessible. By default, any connection to your project is password protected. Although this is secure, it prevents testing routes, connecting different services (like a backend and frontend), and publicly sharing your project. Use this file to make your localhost url publicly accessible and share it with others. Be sure to never share your password! For example, if we run a React app on port 3000, we would want to expose port 3000 so we can use 3000-brevurl.brev.sh to access localhost:3000 . Note: often there's a security layer built into the code (for example, user auth) so publicly exposing a port is not a security worry. If there is a security concern with opening a port publicly, you can use the Brev CLI to port forward your Brev workspace port to your localhost. See below:","title":".brev/ports.yaml"},{"location":"tutorials/","text":"Tutorials Automatically set up Brev machines Configure a Brev machine to automatically set itself up on startup","title":"Tutorials"},{"location":"tutorials/#tutorials","text":"","title":"Tutorials"},{"location":"tutorials/#automatically-set-up-brev-machines","text":"Configure a Brev machine to automatically set itself up on startup","title":"Automatically set up Brev machines"}]}