{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Brev! \ud83e\udd19 Brev is a cloud computer for local development. Use your local tools with a dedicated cloud computer. Getting Started Download the CLI brew install brevdev/homebrew-brev/brev Create an account: brev login This will create an account if you don't have one and prompt you to create an SSH key Create your first workspace brev start <git_url> Note, running this the first time might take a few minutes. Startup times will increase with the next major release (Eta March 2022). Connect your computer to your cluster Brev creates a connection from your local computer to your cluster by running the background daemon brev run-tasks -d Start Coding! \ud83e\udd19 You are now ready to ssh into your workspace! You can find it by running brev ls Open VS Code to your workspace with brev open workspace_name Follow the guide here for Jetbrains products Make your environment reproducible Create your .brev/setup.sh script to make your environment reproducible. If your repo contains a .brev/setup.sh script, Brev will automatically run it when creating the workspace. We automatically create the setup script for you. Populate it and commit it to your repo. Read more here (Optional) Configure brev to autostart ssh proxy daemon so you don't have to run run-tasks on boot. If you run into any issues, run brev refresh . Not sure what your workspace is called? Try brev ls . Wrong organization? Try brev ls orgs and then brev set <org_name> . View the full CLI docs here , and reach out to us in the Discord for help! We're here for anything you need. Build something great \ud83e\udd19","title":"Welcome to Brev! \ud83e\udd19"},{"location":"#welcome-to-brev","text":"Brev is a cloud computer for local development. Use your local tools with a dedicated cloud computer.","title":"Welcome to Brev! \ud83e\udd19"},{"location":"#getting-started","text":"Download the CLI brew install brevdev/homebrew-brev/brev Create an account: brev login This will create an account if you don't have one and prompt you to create an SSH key Create your first workspace brev start <git_url> Note, running this the first time might take a few minutes. Startup times will increase with the next major release (Eta March 2022). Connect your computer to your cluster Brev creates a connection from your local computer to your cluster by running the background daemon brev run-tasks -d Start Coding! \ud83e\udd19 You are now ready to ssh into your workspace! You can find it by running brev ls Open VS Code to your workspace with brev open workspace_name Follow the guide here for Jetbrains products Make your environment reproducible Create your .brev/setup.sh script to make your environment reproducible. If your repo contains a .brev/setup.sh script, Brev will automatically run it when creating the workspace. We automatically create the setup script for you. Populate it and commit it to your repo. Read more here (Optional) Configure brev to autostart ssh proxy daemon so you don't have to run run-tasks on boot. If you run into any issues, run brev refresh . Not sure what your workspace is called? Try brev ls . Wrong organization? Try brev ls orgs and then brev set <org_name> . View the full CLI docs here , and reach out to us in the Discord for help! We're here for anything you need. Build something great \ud83e\udd19","title":"Getting Started"},{"location":"howto/","text":"How To Copy Personal Settings Copy personal settings into every Brev.dev workspace Common .Brev Installations Cheatsheet for common installations for your .brev setup script Find your localhost Looking for your localhost url? Make a Port Public Remove auth from your localhost Environment Variables in Setup Script How to add environment variables in your setup script Reset Your Machine to Troubleshoot You can reset your Brev machine and get a newly configured one to troubleshoot. Invite Users You can invite users to your org from the CLI or console Connect to a workspace with emacs with Jetbrains IDEs with VS Code Organization Management Create an org Invite a user to your org","title":"Home"},{"location":"howto/#how-to","text":"","title":"How To"},{"location":"howto/#copy-personal-settings","text":"Copy personal settings into every Brev.dev workspace","title":"Copy Personal Settings"},{"location":"howto/#common-brev-installations","text":"Cheatsheet for common installations for your .brev setup script","title":"Common .Brev Installations"},{"location":"howto/#find-your-localhost","text":"Looking for your localhost url?","title":"Find your localhost"},{"location":"howto/#make-a-port-public","text":"Remove auth from your localhost","title":"Make a Port Public"},{"location":"howto/#environment-variables-in-setup-script","text":"How to add environment variables in your setup script","title":"Environment Variables in Setup Script"},{"location":"howto/#reset-your-machine-to-troubleshoot","text":"You can reset your Brev machine and get a newly configured one to troubleshoot.","title":"Reset Your Machine to Troubleshoot"},{"location":"howto/#invite-users","text":"You can invite users to your org from the CLI or console","title":"Invite Users"},{"location":"howto/#connect-to-a-workspace","text":"with emacs with Jetbrains IDEs with VS Code","title":"Connect to a workspace"},{"location":"howto/#organization-management","text":"Create an org Invite a user to your org","title":"Organization Management"},{"location":"howto/automatically-set-up/","text":"How To Automatically set up Brev machines with .brev setup script. Specify software and dependencies that are required for your project. Creating a .brev setup script for each Brev project will standardize dependencies, packages and tools across all developers contributing to the same project (ex. Node v14, Yarn v1.22) Below are common installations for your convenience. Add them to your root project directory at /.brev/setup.sh Install Yarn ##### Yarn ##### ( echo \"\" ; echo \"##### Yarn #####\" ; echo \"\" ; ) curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list sudo apt update sudo apt install -y yarn Install Rust #### RUST ##### ( echo \"\" ; echo \"##### Rust #####\" ; echo \"\" ; ) curl https://sh.rustup.rs -sSf | sh -s -- -y Install Homebrew ##### Homebrew ##### ( echo \"\" ; echo \"##### Homebrew #####\" ; echo \"\" ; ) curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh | bash - echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"' >> /home/brev/.bash_profile echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"' >> /home/brev/.zshrc eval \" $( /home/linuxbrew/.linuxbrew/bin/brew shellenv ) \" Node ##### Node v14.x + npm ##### ( echo \"\" ; echo \"##### Node v14.x + npm #####\" ; echo \"\" ; ) sudo apt install ca-certificates curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash - sudo apt-get install -y nodejs Install NPM Packages Without Sudo Note: this might not work depending on your shell. We recommend installing globally with sudo. # install npm packages globally without sudo # modified from https://stackoverflow.com/questions/18088372/how-to-npm-install-global-not-as-root mkdir \" ${ HOME } /.npm-packages\" printf \"prefix= ${ HOME } /.npm-packages\" >> $HOME /.npmrc cat <<EOF | tee -a ~/.bashrc | tee -a ~/.zshrc NPM_PACKAGES=\"\\${HOME}/.npm-packages\" NODE_PATH=\"\\${NPM_PACKAGES}/lib/node_modules:\\${NODE_PATH}\" PATH=\"\\${NPM_PACKAGES}/bin:\\${PATH}\" # Unset manpath so we can inherit from /etc/manpath via the `manpath` # command unset MANPATH # delete if you already modified MANPATH elsewhere in your config MANPATH=\"\\${NPM_PACKAGES}/share/man:\\$(manpath)\" EOF Python, Pip, and Poetry ##### Python + Pip + Poetry ##### ( echo \"\" ; echo \"##### Python + Pip + Poetry #####\" ; echo \"\" ; ) sudo apt-get install -y python3-distutils sudo apt-get install -y python3-apt curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3 - curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py rm get-pip.py echo \"\" >> ~/.zshrc echo \"export PATH=/home/brev/.local/bin: $PATH \" >> ~/.zshrc echo \"\" >> ~/.bashrc echo \"export PATH=/home/brev/.local/bin: $PATH \" >> ~/.bashrc source ~/.zshrc source ~/.bashrc source $HOME /.poetry/env Golang ##### Golang v16x ##### ( echo \"\" ; echo \"##### Golang v16x #####\" ; echo \"\" ; ) wget https://golang.org/dl/go1.16.7.linux-amd64.tar.gz sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.16.7.linux-amd64.tar.gz echo \"\" | sudo tee -a ~/.bashrc echo \"export PATH=\\$PATH:/usr/local/go/bin\" | sudo tee -a ~/.bashrc source ~/.bashrc echo \"\" | sudo tee -a ~/.zshrc echo \"export PATH=\\$PATH:/usr/local/go/bin\" | sudo tee -a ~/.zshrc source ~/.zshrc rm go1.16.7.linux-amd64.tar.gz Custom command example We recommend the echo statement before any command for clearer output logs. ##### Custom commands ##### ( echo \"\" ; echo \"##### Custom commands #####\" ; echo \"\" ; ) npm install","title":"Common Installations"},{"location":"howto/automatically-set-up/#how-to","text":"","title":"How To"},{"location":"howto/automatically-set-up/#automatically-set-up-brev-machines-with-brev-setup-script","text":"Specify software and dependencies that are required for your project. Creating a .brev setup script for each Brev project will standardize dependencies, packages and tools across all developers contributing to the same project (ex. Node v14, Yarn v1.22) Below are common installations for your convenience. Add them to your root project directory at /.brev/setup.sh","title":"Automatically set up Brev machines with .brev setup script."},{"location":"howto/automatically-set-up/#install-yarn","text":"##### Yarn ##### ( echo \"\" ; echo \"##### Yarn #####\" ; echo \"\" ; ) curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list sudo apt update sudo apt install -y yarn","title":"Install Yarn"},{"location":"howto/automatically-set-up/#install-rust","text":"#### RUST ##### ( echo \"\" ; echo \"##### Rust #####\" ; echo \"\" ; ) curl https://sh.rustup.rs -sSf | sh -s -- -y","title":"Install Rust"},{"location":"howto/automatically-set-up/#install-homebrew","text":"##### Homebrew ##### ( echo \"\" ; echo \"##### Homebrew #####\" ; echo \"\" ; ) curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh | bash - echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"' >> /home/brev/.bash_profile echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"' >> /home/brev/.zshrc eval \" $( /home/linuxbrew/.linuxbrew/bin/brew shellenv ) \"","title":"Install Homebrew"},{"location":"howto/automatically-set-up/#node","text":"##### Node v14.x + npm ##### ( echo \"\" ; echo \"##### Node v14.x + npm #####\" ; echo \"\" ; ) sudo apt install ca-certificates curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash - sudo apt-get install -y nodejs","title":"Node"},{"location":"howto/automatically-set-up/#install-npm-packages-without-sudo","text":"Note: this might not work depending on your shell. We recommend installing globally with sudo. # install npm packages globally without sudo # modified from https://stackoverflow.com/questions/18088372/how-to-npm-install-global-not-as-root mkdir \" ${ HOME } /.npm-packages\" printf \"prefix= ${ HOME } /.npm-packages\" >> $HOME /.npmrc cat <<EOF | tee -a ~/.bashrc | tee -a ~/.zshrc NPM_PACKAGES=\"\\${HOME}/.npm-packages\" NODE_PATH=\"\\${NPM_PACKAGES}/lib/node_modules:\\${NODE_PATH}\" PATH=\"\\${NPM_PACKAGES}/bin:\\${PATH}\" # Unset manpath so we can inherit from /etc/manpath via the `manpath` # command unset MANPATH # delete if you already modified MANPATH elsewhere in your config MANPATH=\"\\${NPM_PACKAGES}/share/man:\\$(manpath)\" EOF","title":"Install NPM Packages Without Sudo"},{"location":"howto/automatically-set-up/#python-pip-and-poetry","text":"##### Python + Pip + Poetry ##### ( echo \"\" ; echo \"##### Python + Pip + Poetry #####\" ; echo \"\" ; ) sudo apt-get install -y python3-distutils sudo apt-get install -y python3-apt curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3 - curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py rm get-pip.py echo \"\" >> ~/.zshrc echo \"export PATH=/home/brev/.local/bin: $PATH \" >> ~/.zshrc echo \"\" >> ~/.bashrc echo \"export PATH=/home/brev/.local/bin: $PATH \" >> ~/.bashrc source ~/.zshrc source ~/.bashrc source $HOME /.poetry/env","title":"Python, Pip, and Poetry"},{"location":"howto/automatically-set-up/#golang","text":"##### Golang v16x ##### ( echo \"\" ; echo \"##### Golang v16x #####\" ; echo \"\" ; ) wget https://golang.org/dl/go1.16.7.linux-amd64.tar.gz sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.16.7.linux-amd64.tar.gz echo \"\" | sudo tee -a ~/.bashrc echo \"export PATH=\\$PATH:/usr/local/go/bin\" | sudo tee -a ~/.bashrc source ~/.bashrc echo \"\" | sudo tee -a ~/.zshrc echo \"export PATH=\\$PATH:/usr/local/go/bin\" | sudo tee -a ~/.zshrc source ~/.zshrc rm go1.16.7.linux-amd64.tar.gz","title":"Golang"},{"location":"howto/automatically-set-up/#custom-command-example","text":"We recommend the echo statement before any command for clearer output logs. ##### Custom commands ##### ( echo \"\" ; echo \"##### Custom commands #####\" ; echo \"\" ; ) npm install","title":"Custom command example"},{"location":"howto/configure-ssh-proxy-daemon-at-boot/","text":"How To Configure ssh proxy to start at Boot Make sure that you have installed the cli Mac OS Add the following configuration to ~/Library/LaunchAgents/dev.brev.plist . If the directory ~/Library/LaunchAgents/ does not exist, you can create it with $ mkdir -p ~/Library/LaunchAgents/ <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist version= \"1.0\" > <dict> <key> Label </key> <string> dev.brev </string> <key> ProgramArguments </key> <array> <string> brev </string> <string> run-tasks </string> </array> <key> KeepAlive </key> <true/> </dict> </plist> start the service with: launchctl bootstrap gui/ $UID ~/Library/LaunchAgents/dev.brev.plist check to see that it worked by runnning launchctl list | grep brev which should show output similar to: 4203 0 dev.brev Linux Add the the following configuration to /etc/systemd/user/brev.service or $HOME/.config/systemd/user/brev.service [Install] WantedBy = multi-user.target [Unit] Description = Brev SSH Proxy Daemon After = systend-user-sessions.service [Service] Type = simple ExecStart = brev run-tasks Restart = always enable and start the daemon by running : $ systemctl --user enable brev $ systemctl --user start brev check status with $ systemctl --user status brev and you should see an output similar to: \u25cf brev.service - Brev SSH Proxy Daemon Loaded: loaded ( /etc/xdg/systemd/user/brev.service ; disabled ; vendor preset: enabled ) Active: active ( running ) since Tue 2022 -01-18 19 :03:49 PST ; 3s ago Main PID: 264331 ( brev ) Tasks: 11 ( limit: 47870 ) Memory: 8 .8M CPU: 59ms CGroup: /user.slice/user-1000.slice/user@1000.service/app.slice/brev.service \u2514\u2500264331 /opt/brev/bin/brev run-tasks Jan 18 19 :03:49 pop-os systemd [ 4294 ] : Started Brev SSH Proxy Daemon. Jan 18 19 :03:51 pop-os brev [ 264331 ] : 2022 /01/18 19 :03:51 creating new ssh config Jan 18 19 :03:51 pop-os brev [ 264331 ] : 2022 /01/18 19 :03:51 ensuring has include","title":"Configure SSH Proxy Daemon at Boot"},{"location":"howto/configure-ssh-proxy-daemon-at-boot/#how-to","text":"","title":"How To"},{"location":"howto/configure-ssh-proxy-daemon-at-boot/#configure-ssh-proxy-to-start-at-boot","text":"Make sure that you have installed the cli","title":"Configure ssh proxy to start at Boot"},{"location":"howto/configure-ssh-proxy-daemon-at-boot/#mac-os","text":"Add the following configuration to ~/Library/LaunchAgents/dev.brev.plist . If the directory ~/Library/LaunchAgents/ does not exist, you can create it with $ mkdir -p ~/Library/LaunchAgents/ <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist version= \"1.0\" > <dict> <key> Label </key> <string> dev.brev </string> <key> ProgramArguments </key> <array> <string> brev </string> <string> run-tasks </string> </array> <key> KeepAlive </key> <true/> </dict> </plist> start the service with: launchctl bootstrap gui/ $UID ~/Library/LaunchAgents/dev.brev.plist check to see that it worked by runnning launchctl list | grep brev which should show output similar to: 4203 0 dev.brev","title":"Mac OS"},{"location":"howto/configure-ssh-proxy-daemon-at-boot/#linux","text":"Add the the following configuration to /etc/systemd/user/brev.service or $HOME/.config/systemd/user/brev.service [Install] WantedBy = multi-user.target [Unit] Description = Brev SSH Proxy Daemon After = systend-user-sessions.service [Service] Type = simple ExecStart = brev run-tasks Restart = always enable and start the daemon by running : $ systemctl --user enable brev $ systemctl --user start brev check status with $ systemctl --user status brev and you should see an output similar to: \u25cf brev.service - Brev SSH Proxy Daemon Loaded: loaded ( /etc/xdg/systemd/user/brev.service ; disabled ; vendor preset: enabled ) Active: active ( running ) since Tue 2022 -01-18 19 :03:49 PST ; 3s ago Main PID: 264331 ( brev ) Tasks: 11 ( limit: 47870 ) Memory: 8 .8M CPU: 59ms CGroup: /user.slice/user-1000.slice/user@1000.service/app.slice/brev.service \u2514\u2500264331 /opt/brev/bin/brev run-tasks Jan 18 19 :03:49 pop-os systemd [ 4294 ] : Started Brev SSH Proxy Daemon. Jan 18 19 :03:51 pop-os brev [ 264331 ] : 2022 /01/18 19 :03:51 creating new ssh config Jan 18 19 :03:51 pop-os brev [ 264331 ] : 2022 /01/18 19 :03:51 ensuring has include","title":"Linux"},{"location":"howto/connect-via-emacs/","text":"Connect to a Brev workspace using Emacs Make sure you have the Brev CLI installed In emacs execute M-x dired RET and enter the directory /ssh:<workspace-name>:/home/brev/workspace/vue-coffee You'll need to have a running workspace. If you don't have one yet: Deploy a new workspace with brev start $ brev start https://github.com/just-fine/vue-coffee Workspace is starting. This can take up to 2 minutes the first time. \u28fb workspace is deploying Your workspace is ready! SSH into your machine: ssh just-fine/vue-coffee That's it! \ud83e\udd19","title":"Connect Via Emacs"},{"location":"howto/connect-via-emacs/#connect-to-a-brev-workspace-using-emacs","text":"Make sure you have the Brev CLI installed In emacs execute M-x dired RET and enter the directory /ssh:<workspace-name>:/home/brev/workspace/vue-coffee You'll need to have a running workspace. If you don't have one yet: Deploy a new workspace with brev start $ brev start https://github.com/just-fine/vue-coffee Workspace is starting. This can take up to 2 minutes the first time. \u28fb workspace is deploying Your workspace is ready! SSH into your machine: ssh just-fine/vue-coffee That's it! \ud83e\udd19","title":"Connect to a Brev workspace using Emacs"},{"location":"howto/connect-via-jetbrains/","text":"Connect to a Brev workspace using JetBrains Make sure you have the Brev CLI installed This includes Webstorm, GoLand, IntelliJ IDEA, PyCharm etc. You will need to open JetBrains Gateway instead of your locally installed JetBrains IDE. It will install the language process server and other heavyweight processes on the remote machine, while exposing the client of the IDE to you. We guide you through this process the first time you download the CLI, but a link to manually download the software is here: jetbrains.com/remote-development/gateway Run brev jetbrains in your terminal. Only for Jetbrains products, this process needs to stay running to maintains the connection to your computer. Our next major release gets rid of this step (eta 2 weeks-- March 2022). Open JetBrains Gateway and select \"Connect Via SSH\". Your Brev machines should already be listed for you! Select the correct machine and click \"Check Connection and Continue\". If you do not see your brev machine, skip to the end of this to manually add ssh connection details \ud83d\udc47 Select the IDE you'd like to use. Enter the project directory. This will always be /home/brev/workspace/<GIT_REPO_OR_PROJECT_NAME> . If you don't know the GIT_REPO_OR_PROJECT_NAME, simply click on the folder icon to find the correct folder. Click Download and Start IDE! That's it! Do It Manually To manually add SSH connection details: Select <New Connection> from the Connection dropdown Enter the following information: Username: brev Host: localhost Private Key: <ROOT>/.brev/brev.pem . ROOT is ~, in Mac this would be /Users/<USERNAME> . You must enter the absolute path, relative paths will not work. Save Passphrase: Unchecked Port: Select the port of the brev project displayed in your terminal after entering brev up. See example below: Go back to step 3) and continue from there \ud83d\ude42","title":"Connect Via Jetbrains"},{"location":"howto/connect-via-jetbrains/#connect-to-a-brev-workspace-using-jetbrains","text":"Make sure you have the Brev CLI installed This includes Webstorm, GoLand, IntelliJ IDEA, PyCharm etc. You will need to open JetBrains Gateway instead of your locally installed JetBrains IDE. It will install the language process server and other heavyweight processes on the remote machine, while exposing the client of the IDE to you. We guide you through this process the first time you download the CLI, but a link to manually download the software is here: jetbrains.com/remote-development/gateway Run brev jetbrains in your terminal. Only for Jetbrains products, this process needs to stay running to maintains the connection to your computer. Our next major release gets rid of this step (eta 2 weeks-- March 2022). Open JetBrains Gateway and select \"Connect Via SSH\". Your Brev machines should already be listed for you! Select the correct machine and click \"Check Connection and Continue\". If you do not see your brev machine, skip to the end of this to manually add ssh connection details \ud83d\udc47 Select the IDE you'd like to use. Enter the project directory. This will always be /home/brev/workspace/<GIT_REPO_OR_PROJECT_NAME> . If you don't know the GIT_REPO_OR_PROJECT_NAME, simply click on the folder icon to find the correct folder. Click Download and Start IDE! That's it!","title":"Connect to a Brev workspace using JetBrains"},{"location":"howto/connect-via-jetbrains/#do-it-manually","text":"To manually add SSH connection details: Select <New Connection> from the Connection dropdown Enter the following information: Username: brev Host: localhost Private Key: <ROOT>/.brev/brev.pem . ROOT is ~, in Mac this would be /Users/<USERNAME> . You must enter the absolute path, relative paths will not work. Save Passphrase: Unchecked Port: Select the port of the brev project displayed in your terminal after entering brev up. See example below: Go back to step 3) and continue from there \ud83d\ude42","title":"Do It Manually"},{"location":"howto/connect-via-vscode/","text":"Connect to a Brev workspace using VSCode Make sure you have the Brev CLI installed Open VS Code and use the Remote - SSH extension to access the remote machine. Download the Remote - SSH extension extension With the extension downloaded, open the command palette and type in ssh. Select Remote-SSH: Connect to Host... Select your workspace, and that's it! By the way, if you're connecting to a workspace that you've connected to in the past, you can open up directly to the folder: Click on the Remote Explorer icon Click on the folder icon for the workspace you want to connect to","title":"Connect Via VSCode"},{"location":"howto/connect-via-vscode/#connect-to-a-brev-workspace-using-vscode","text":"Make sure you have the Brev CLI installed Open VS Code and use the Remote - SSH extension to access the remote machine. Download the Remote - SSH extension extension With the extension downloaded, open the command palette and type in ssh. Select Remote-SSH: Connect to Host... Select your workspace, and that's it! By the way, if you're connecting to a workspace that you've connected to in the past, you can open up directly to the folder: Click on the Remote Explorer icon Click on the folder icon for the workspace you want to connect to","title":"Connect to a Brev workspace using VSCode"},{"location":"howto/copy-personal-settings/","text":"How To Copy Personal Settings You probably have specific settings you wanna bring to every workspace, but only on your workspaces. Brev.dev supports each developer having their own setup script. The repo has a .brev/setup.sh file that gets run on every single workspace, but Brev.dev also runs each developer's personal .brev/setup.sh if it exists. Create a Personal Settings Repo From the console , go to your profile by clicking \"Account\" on the top-right. You'll see a section called Personal Settings . This has a git repo that Brev.dev clones into every workspace and runs the .brev/setup.sh it contains. To setup your personal settings: Click here to fork the personal settings repository (you can make your forked repo private if you like) Copy the new url, and paste it in the input field under Personal Settings and click the save button. You're done! Now every workspace will clone this repo and run your personal settings. Make it yours! Clone your forked repo-- or from any workspace, cd into /workspace/user-dotbrev . Commit and push any changes and your next Brev.dev workspace will automatically clone the latest.","title":"Copy Personal Settings"},{"location":"howto/copy-personal-settings/#how-to","text":"","title":"How To"},{"location":"howto/copy-personal-settings/#copy-personal-settings","text":"You probably have specific settings you wanna bring to every workspace, but only on your workspaces. Brev.dev supports each developer having their own setup script. The repo has a .brev/setup.sh file that gets run on every single workspace, but Brev.dev also runs each developer's personal .brev/setup.sh if it exists.","title":"Copy Personal Settings"},{"location":"howto/copy-personal-settings/#create-a-personal-settings-repo","text":"From the console , go to your profile by clicking \"Account\" on the top-right. You'll see a section called Personal Settings . This has a git repo that Brev.dev clones into every workspace and runs the .brev/setup.sh it contains. To setup your personal settings: Click here to fork the personal settings repository (you can make your forked repo private if you like) Copy the new url, and paste it in the input field under Personal Settings and click the save button. You're done! Now every workspace will clone this repo and run your personal settings.","title":"Create a Personal Settings Repo"},{"location":"howto/copy-personal-settings/#make-it-yours","text":"Clone your forked repo-- or from any workspace, cd into /workspace/user-dotbrev . Commit and push any changes and your next Brev.dev workspace will automatically clone the latest.","title":"Make it yours!"},{"location":"howto/create-org/","text":"Create a Brev Organization You can create a Brev organization in the Brev dashboard . From the Organization dropdown at the top, click Create New Organization . Give it a name, and click Create!","title":"Create an Organization"},{"location":"howto/create-org/#create-a-brev-organization","text":"You can create a Brev organization in the Brev dashboard . From the Organization dropdown at the top, click Create New Organization . Give it a name, and click Create!","title":"Create a Brev Organization"},{"location":"howto/env-vars-dot-brev/","text":"How To Environment Variables in the Setup Script The .brev scripts executes once a Brev machine is provisioned, but are not preserved. You must instead add environment variables to a ~/.bashrc or ~/.zshrc file that gets sourced. For example, to install python's package manager pip which requires modifying the path, you'll need to first install pip: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py rm get-pip.py You'll need to instead put this new path in your zshrc and bashrc and source both files. printf \"\\n%s\\n\" \"export PATH=/home/brev/.local/bin: $PATH \" | tee -a ~/.bashrc | tee -a ~/.zshrc # Instead of exporting the variable: # export PATH=/home/brev/.local/bin:$PATH Here's the full snipped to add to .brev for properly installing pip: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py rm get-pip.py echo \"\" >> ~/.zshrc echo \"export PATH=/home/brev/.local/bin: $PATH \" >> ~/.zshrc echo \"\" >> ~/.bashrc echo \"export PATH=/home/brev/.local/bin: $PATH \" >> ~/.bashrc source ~/.zshrc source ~/.bashrc","title":"Environment Variables"},{"location":"howto/env-vars-dot-brev/#how-to","text":"","title":"How To"},{"location":"howto/env-vars-dot-brev/#environment-variables-in-the-setup-script","text":"The .brev scripts executes once a Brev machine is provisioned, but are not preserved. You must instead add environment variables to a ~/.bashrc or ~/.zshrc file that gets sourced. For example, to install python's package manager pip which requires modifying the path, you'll need to first install pip: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py rm get-pip.py You'll need to instead put this new path in your zshrc and bashrc and source both files. printf \"\\n%s\\n\" \"export PATH=/home/brev/.local/bin: $PATH \" | tee -a ~/.bashrc | tee -a ~/.zshrc # Instead of exporting the variable: # export PATH=/home/brev/.local/bin:$PATH Here's the full snipped to add to .brev for properly installing pip: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py rm get-pip.py echo \"\" >> ~/.zshrc echo \"export PATH=/home/brev/.local/bin: $PATH \" >> ~/.zshrc echo \"\" >> ~/.bashrc echo \"export PATH=/home/brev/.local/bin: $PATH \" >> ~/.bashrc source ~/.zshrc source ~/.bashrc","title":"Environment Variables in the Setup Script"},{"location":"howto/find-my-localhost/","text":"How To Find my localhost If you're using the CLI and local tools, see the port-forward command If you're inside your Brev workspace and are running something on localhost, you can access it using your workspace URL. Prefix your port to the workspace URL. For ex: 3000-myworkspace.brev.sh is a public URL to localhost:3000 Get your URL from the CLI Run brev ls to get your workspace's URL Get your URL from the console Copy your URL: Authentication By default, your public URL will require authentication. You can get the password for each workspace from the home page of the console. You can get rid of authentication to use with other applications such as callback URLs. You can do this just for yourself or for everyone. Remove auth for everyone List any port you wish to remove auth from in .brev/ports.yaml . See here for more: /howto/make-port-public Remove auth just for yourself You can port-forward any port via the Brev.dev CLI , or use plugins such as VS Code ports section. This will make the port available to you on localhost. We're launching our V2 in late June which will automatically port forward across all your workspaces. This means you can have two workspaces with different services running and access them on any machine via localhost. We would love for you to try it! Hop in the discord and let us know you're waiting for it! https://discord.gg/NVDyv7TUgJ","title":"Find Your Localhost"},{"location":"howto/find-my-localhost/#how-to","text":"","title":"How To"},{"location":"howto/find-my-localhost/#find-my-localhost","text":"If you're using the CLI and local tools, see the port-forward command If you're inside your Brev workspace and are running something on localhost, you can access it using your workspace URL. Prefix your port to the workspace URL. For ex: 3000-myworkspace.brev.sh is a public URL to localhost:3000","title":"Find my localhost"},{"location":"howto/find-my-localhost/#get-your-url-from-the-cli","text":"Run brev ls to get your workspace's URL","title":"Get your URL from the CLI"},{"location":"howto/find-my-localhost/#get-your-url-from-the-console","text":"Copy your URL:","title":"Get your URL from the console"},{"location":"howto/find-my-localhost/#authentication","text":"By default, your public URL will require authentication. You can get the password for each workspace from the home page of the console. You can get rid of authentication to use with other applications such as callback URLs. You can do this just for yourself or for everyone.","title":"Authentication"},{"location":"howto/find-my-localhost/#remove-auth-for-everyone","text":"List any port you wish to remove auth from in .brev/ports.yaml . See here for more: /howto/make-port-public","title":"Remove auth for everyone"},{"location":"howto/find-my-localhost/#remove-auth-just-for-yourself","text":"You can port-forward any port via the Brev.dev CLI , or use plugins such as VS Code ports section. This will make the port available to you on localhost. We're launching our V2 in late June which will automatically port forward across all your workspaces. This means you can have two workspaces with different services running and access them on any machine via localhost. We would love for you to try it! Hop in the discord and let us know you're waiting for it! https://discord.gg/NVDyv7TUgJ","title":"Remove auth just for yourself"},{"location":"howto/find-my-workspace/","text":"How To Find My Workspace Name or ID This depends on if you have joined a workspace or not. Find Workspace ID or Name of workspace that you have joined There are many times when using brev it useful to know a workspaces name or id. You can find this information by running: $ brev ls which has an output similar to You have 1 workspaces in Org brev.dev NAME STATUS URL ID brev-cli RUNNING brev-cli-p09m-brevdev.wgt-us-west-2-test.brev.dev x1yxqp09m Connect to running workspace: brev open brev-cli # brev open <NAME> -> open workspace in preferred editor brev shell brev-cli # brev shell <NAME> -> ssh into workspace (shortcut) ssh brev-cli-p09m # ssh <SSH-NAME> -> ssh directly to workspace Or ssh: ssh brev-cli-p09m Find Workspace name of workspace that you have not joined List all workspaces in your current org $ brev ls --all which should have an output similar to ``` \u279c brev-cli git:(main) \u2717 ./brev ls --all You have 1 workspaces in Org brev.dev NAME STATUS URL ID brev-cli RUNNING brev-cli-p09m-brevdev.wgt-us-west-2-test.brev.dev x1yxqp09m Connect to running workspace: brev open brev-cli # brev open -> open workspace in preferred editor brev shell brev-cli # brev shell -> ssh into workspace (shortcut) ssh brev-cli-p09m # ssh -> ssh directly to workspace Or ssh: ssh brev-cli-p09m ssh brev-docs-xp43 6 other projects in Org brev.dev NAME MEMBERS brev-landing-page 2 todo-app 1 vagrant-guide 1 mern-template 1 solidity-nextjs-starter 1 akka-http-quickstart-scala 1 ``` at the bottom of this output you can see the other workspaces in this org that you can join. See Also How To Join a Workspace","title":"How To Find My Workspace Name or ID"},{"location":"howto/find-my-workspace/#how-to-find-my-workspace-name-or-id","text":"This depends on if you have joined a workspace or not.","title":"How To Find My Workspace Name or ID"},{"location":"howto/find-my-workspace/#find-workspace-id-or-name-of-workspace-that-you-have-joined","text":"There are many times when using brev it useful to know a workspaces name or id. You can find this information by running: $ brev ls which has an output similar to You have 1 workspaces in Org brev.dev NAME STATUS URL ID brev-cli RUNNING brev-cli-p09m-brevdev.wgt-us-west-2-test.brev.dev x1yxqp09m Connect to running workspace: brev open brev-cli # brev open <NAME> -> open workspace in preferred editor brev shell brev-cli # brev shell <NAME> -> ssh into workspace (shortcut) ssh brev-cli-p09m # ssh <SSH-NAME> -> ssh directly to workspace Or ssh: ssh brev-cli-p09m","title":"Find Workspace ID or Name of workspace that you have joined"},{"location":"howto/find-my-workspace/#find-workspace-name-of-workspace-that-you-have-not-joined","text":"List all workspaces in your current org $ brev ls --all which should have an output similar to ``` \u279c brev-cli git:(main) \u2717 ./brev ls --all You have 1 workspaces in Org brev.dev NAME STATUS URL ID brev-cli RUNNING brev-cli-p09m-brevdev.wgt-us-west-2-test.brev.dev x1yxqp09m Connect to running workspace: brev open brev-cli # brev open -> open workspace in preferred editor brev shell brev-cli # brev shell -> ssh into workspace (shortcut) ssh brev-cli-p09m # ssh -> ssh directly to workspace Or ssh: ssh brev-cli-p09m ssh brev-docs-xp43 6 other projects in Org brev.dev NAME MEMBERS brev-landing-page 2 todo-app 1 vagrant-guide 1 mern-template 1 solidity-nextjs-starter 1 akka-http-quickstart-scala 1 ``` at the bottom of this output you can see the other workspaces in this org that you can join.","title":"Find Workspace name of workspace that you have not joined"},{"location":"howto/find-my-workspace/#see-also","text":"How To Join a Workspace","title":"See Also"},{"location":"howto/invite-users-to-org/","text":"Invite Users to Your Organization To invite users to your organization: From the CLI Run brev invite to generate an invite link and share it with a teammate. This will prompt your teammate to create an account if they don't have one already. From the Console Go to your org settings page in the Brev console From the Organization dropdown at the top, click on the gear \u2699\ufe0f for your organization. Click on the Invite by Username button or Generate Invite Link . If you generate the invite link, it will prompt your teammate to create an account if they don't have one already. Other ways to share Put your localhost on a public URL to share your in-progress work: howto/find-my-localhost","title":"Invite Users"},{"location":"howto/invite-users-to-org/#invite-users-to-your-organization","text":"To invite users to your organization:","title":"Invite Users to Your Organization"},{"location":"howto/invite-users-to-org/#from-the-cli","text":"Run brev invite to generate an invite link and share it with a teammate. This will prompt your teammate to create an account if they don't have one already.","title":"From the CLI"},{"location":"howto/invite-users-to-org/#from-the-console","text":"Go to your org settings page in the Brev console From the Organization dropdown at the top, click on the gear \u2699\ufe0f for your organization. Click on the Invite by Username button or Generate Invite Link . If you generate the invite link, it will prompt your teammate to create an account if they don't have one already.","title":"From the Console"},{"location":"howto/invite-users-to-org/#other-ways-to-share","text":"Put your localhost on a public URL to share your in-progress work: howto/find-my-localhost","title":"Other ways to share"},{"location":"howto/join-a-workspace/","text":"How to Join a Workspace to join a workspace in your orginization, you can run brev start <workspace name> where <workspace name> is the name of a workspace that another member of that org has started. to list workspaces in your org, run brev ls --all which has an output similar to You have 1 workspaces in Org brev.dev NAME STATUS URL ID brev-cli RUNNING brev-cli-p09m-brevdev.wgt-us-west-2-test.brev. Connect to running workspace: brev open brev-cli # brev open <NAME> -> open workspace in preferred editor brev shell brev-cli # brev shell <NAME> -> ssh into workspace (shortcut) ssh brev-cli-p09m # ssh <SSH-NAME> -> ssh directly to workspace Or ssh: ssh brev-cli-p09m ssh brev-docs-xp43 6 other projects in Org brev.dev NAME MEMBERS brev-landing-page 2 todo-app 1 vagrant-guide 1 mern-template 1 solidity-nextjs-starter 1 akka-http-quickstart-scala 1 the workspaces that I can join are at the bottom of this output 6 other projects in Org brev.dev NAME MEMBERS brev-landing-page 2 todo-app 1 vagrant-guide 1 mern-template 1 solidity-nextjs-starter 1 akka-http-quickstart-scala 1 ``` to join the workspace `brev-landing-page` run ``` $ brev start brev-landing-page ``` which has an output similar to ``` Name flag omitted, using auto generated name: brev-landing-page Workspace is starting. This can take up to 2 minutes the first time. name brev-landing-page template v7nd45zsc Admin resource class 2x8 workspace group brev-test-brevtenant-cluster You can safely ctrl+c to exit \u28df workspace is deploying Connect to the workspace: brev open brev-landing-page # brev open <NAME> -> open workspace in preferred editor brev shell brev-landing-page # brev shell <NAME> -> ssh into workspace (shortcut) ssh brev-landing-page-i9rg # ssh <SSH-NAME> -> ssh directly to workspace","title":"How to Join a Workspace"},{"location":"howto/join-a-workspace/#how-to-join-a-workspace","text":"to join a workspace in your orginization, you can run brev start <workspace name> where <workspace name> is the name of a workspace that another member of that org has started. to list workspaces in your org, run brev ls --all which has an output similar to You have 1 workspaces in Org brev.dev NAME STATUS URL ID brev-cli RUNNING brev-cli-p09m-brevdev.wgt-us-west-2-test.brev. Connect to running workspace: brev open brev-cli # brev open <NAME> -> open workspace in preferred editor brev shell brev-cli # brev shell <NAME> -> ssh into workspace (shortcut) ssh brev-cli-p09m # ssh <SSH-NAME> -> ssh directly to workspace Or ssh: ssh brev-cli-p09m ssh brev-docs-xp43 6 other projects in Org brev.dev NAME MEMBERS brev-landing-page 2 todo-app 1 vagrant-guide 1 mern-template 1 solidity-nextjs-starter 1 akka-http-quickstart-scala 1 the workspaces that I can join are at the bottom of this output 6 other projects in Org brev.dev NAME MEMBERS brev-landing-page 2 todo-app 1 vagrant-guide 1 mern-template 1 solidity-nextjs-starter 1 akka-http-quickstart-scala 1 ``` to join the workspace `brev-landing-page` run ``` $ brev start brev-landing-page ``` which has an output similar to ``` Name flag omitted, using auto generated name: brev-landing-page Workspace is starting. This can take up to 2 minutes the first time. name brev-landing-page template v7nd45zsc Admin resource class 2x8 workspace group brev-test-brevtenant-cluster You can safely ctrl+c to exit \u28df workspace is deploying Connect to the workspace: brev open brev-landing-page # brev open <NAME> -> open workspace in preferred editor brev shell brev-landing-page # brev shell <NAME> -> ssh into workspace (shortcut) ssh brev-landing-page-i9rg # ssh <SSH-NAME> -> ssh directly to workspace","title":"How to Join a Workspace"},{"location":"howto/make-port-public/","text":"How To Make a port public If you're accessing your localhost url such as 3000-jelly-brevdev.brev.sh , you'll notice it requires your password. If you want to remove auth to use Postman, consume the endpoint in your frontend, or just show your mom what you built, you can do so in the .brev/ports.yaml added to every Brev workspace. Add the port you wish to expose in the list and that's it! Note: the version field is optional. It could be useful if you choose to commit this to your project repo.","title":"Make a Port Public"},{"location":"howto/make-port-public/#how-to","text":"","title":"How To"},{"location":"howto/make-port-public/#make-a-port-public","text":"If you're accessing your localhost url such as 3000-jelly-brevdev.brev.sh , you'll notice it requires your password. If you want to remove auth to use Postman, consume the endpoint in your frontend, or just show your mom what you built, you can do so in the .brev/ports.yaml added to every Brev workspace. Add the port you wish to expose in the list and that's it! Note: the version field is optional. It could be useful if you choose to commit this to your project repo.","title":"Make a port public"},{"location":"howto/secret-variables/","text":"How To Securely use secret variables If you're building with services such as AWS, you'll need a secure place for credentials and configs, such as those in the ~/.aws directory on your computer. Brev has an encrypted secrets manager for these types of variables. From the CLI From the CLI, run brev secret and follow the prompts. To avoid interactive mode, pass in all the data via flags. See here: /reference/brev-cli From the console Go to your Account page on the Brev dashboard for the encrypted secrets manger Click on \"New Secret and populate the form accordingly. You can load environment variables or change the type from \"Environment Variables\" to \"File\" for something like the .aws/credentials file (as shown in the picture). Setting secrets or environment variables for your o`rganization The example above sets your personal secret for all of your Brev workspaces. If you wish to set a variable or secret for your entire org, go to your organization's settings from the organization drop down and use the encrypted secret manager there.","title":"Encrypted Secrets"},{"location":"howto/secret-variables/#how-to","text":"Securely use secret variables If you're building with services such as AWS, you'll need a secure place for credentials and configs, such as those in the ~/.aws directory on your computer. Brev has an encrypted secrets manager for these types of variables.","title":"How To"},{"location":"howto/secret-variables/#from-the-cli","text":"From the CLI, run brev secret and follow the prompts. To avoid interactive mode, pass in all the data via flags. See here: /reference/brev-cli","title":"From the CLI"},{"location":"howto/secret-variables/#from-the-console","text":"Go to your Account page on the Brev dashboard for the encrypted secrets manger Click on \"New Secret and populate the form accordingly. You can load environment variables or change the type from \"Environment Variables\" to \"File\" for something like the .aws/credentials file (as shown in the picture).","title":"From the console"},{"location":"howto/secret-variables/#setting-secrets-or-environment-variables-for-your-organization","text":"The example above sets your personal secret for all of your Brev workspaces. If you wish to set a variable or secret for your entire org, go to your organization's settings from the organization drop down and use the encrypted secret manager there.","title":"Setting secrets or environment variables for your o`rganization"},{"location":"howto/share-your-workspace/","text":"How To Invite Users to Your Organization ... todo by Ali","title":"How To"},{"location":"howto/share-your-workspace/#how-to","text":"","title":"How To"},{"location":"howto/share-your-workspace/#invite-users-to-your-organization","text":"... todo by Ali","title":"Invite Users to Your Organization"},{"location":"howto/troubleshoot-reset/","text":"How To Reset Your Machine If you setup your .brev directory , you can easily dispose of machines if they get into a bad state. Your fresh machine will come configured, so you can freely reset when you encounter problems. Note: Resetting your workspace will save uncommitted files, so you can freely use brev reset when experimenting with the setup script From the CLI Run brev reset <workspace-name-or-id> From the console Go to workspace settings and clicking the 'reset' button in the Danger Zone.","title":"Troubleshoot Reset"},{"location":"howto/troubleshoot-reset/#how-to","text":"","title":"How To"},{"location":"howto/troubleshoot-reset/#reset-your-machine","text":"If you setup your .brev directory , you can easily dispose of machines if they get into a bad state. Your fresh machine will come configured, so you can freely reset when you encounter problems. Note: Resetting your workspace will save uncommitted files, so you can freely use brev reset when experimenting with the setup script","title":"Reset Your Machine"},{"location":"howto/troubleshoot-reset/#from-the-cli","text":"Run brev reset <workspace-name-or-id>","title":"From the CLI"},{"location":"howto/troubleshoot-reset/#from-the-console","text":"Go to workspace settings and clicking the 'reset' button in the Danger Zone.","title":"From the console"},{"location":"reference/","text":"Reference We're in between Brev versions right now and a lot of the docs are quickly becoming outdated. If you're looking for GPU documentation, please click here. Brev creates your powerful computer in the cloud for development. Everything has moved to the cloud except your development, which doesn't make a ton of sense since development has the most to benefit from the cloud: unlimited ram and CPU instant upgrades to the latest and greatest hardware no more wasting time with machine configurations get a public url for anything you're working on: APIs, front ends, etc. Brev is not a streamed computer-- it's a service that configures your powerful cloud computer for you to build anything with. You are the superuser on your Brev machine. The .brev directory Brev solves configurations with the .brev directory. There are two types of configurations: Personal dev configs, such as Zsh vs Bash, light mode vs dark mode, keybindings, and certain extensions Repo configs, such as node version, python version, any specific installation/set up/onboarding instructions. Personal .brev For the first type of configs, go to your Account and update the Workspace Settings Repo. You'll need a git repo that just contains a .brev/setup.sh file. Fork this repo as a good place to start. Project .brev Automatically configure your project for any new contributor by commiting a .brev/setup.sh to the code repository. Brev will automatically execute the script for every new workspace created. Brev automatically creates the .brev/setup.sh if it doesn't exist.","title":"Home"},{"location":"reference/#reference","text":"We're in between Brev versions right now and a lot of the docs are quickly becoming outdated. If you're looking for GPU documentation, please click here. Brev creates your powerful computer in the cloud for development. Everything has moved to the cloud except your development, which doesn't make a ton of sense since development has the most to benefit from the cloud: unlimited ram and CPU instant upgrades to the latest and greatest hardware no more wasting time with machine configurations get a public url for anything you're working on: APIs, front ends, etc. Brev is not a streamed computer-- it's a service that configures your powerful cloud computer for you to build anything with. You are the superuser on your Brev machine.","title":"Reference"},{"location":"reference/#the-brev-directory","text":"Brev solves configurations with the .brev directory. There are two types of configurations: Personal dev configs, such as Zsh vs Bash, light mode vs dark mode, keybindings, and certain extensions Repo configs, such as node version, python version, any specific installation/set up/onboarding instructions.","title":"The .brev directory"},{"location":"reference/#personal-brev","text":"For the first type of configs, go to your Account and update the Workspace Settings Repo. You'll need a git repo that just contains a .brev/setup.sh file. Fork this repo as a good place to start.","title":"Personal .brev"},{"location":"reference/#project-brev","text":"Automatically configure your project for any new contributor by commiting a .brev/setup.sh to the code repository. Brev will automatically execute the script for every new workspace created. Brev automatically creates the .brev/setup.sh if it doesn't exist.","title":"Project .brev"},{"location":"reference/brev-cli/","text":"Brev CLI Reference The Brev CLI is the preferred interface for Brev, allowing you to use cloud computers with your local development tools. Our goal is to be as invisible as possible. Every command has a --help flag if you need to see options. Brev CLI commands are broken up into 4 categories: Workspace commands Context commands SSH command Housekeeping commands. Workspace Commands scale Scale a dev environment up or down to a different instance Synopsis brev scale [ Workspace Name or ID... ] --gpu [GPU Instance] # or brev scale [ Workspace Name or ID... ] --cpu [CPU Instance] Description Move your dev environment to a different size machine. All work, settings, etc will be persisted. View available instance types here . Examples Scale to a GPU instance $ brev scale brev-environments-ui --gpu g5g.xlarge Scale to a CPU instance $ brev scale brev-environments-ui --cpu 2x8 delete Delete a Workspace by name or ID. Synopsis brev delete [ Workspace Name or ID... ] Description Deleting a workspace will permanently delete a workspace from your account. This command will delete all content in the workspace and any volumes associated with the workspace. This command is not reversable and can result in lost work. Examples Delete a workspace $ brev delete payments-frontend Deleting workspace payments-frontend. This can take a few minutes. Run 'brev ls' to check status Delete multiple workspaces $ brev delete bar euler54 naive-pubsub jupyter Deleting workspace bar. This can take a few minutes. Run 'brev ls' to check status Deleting workspace euler54. This can take a few minutes. Run 'brev ls' to check status Deleting workspace naive-pubsub. This can take a few minutes. Run 'brev ls' to check status Deleting workspace jupyter. This can take a few minutes. Run 'brev ls' to check status reset Description This command deletes your machine and gets you a fresh one. Make sure to have a .brev setup script or you'll have to reinstall everythign manually. Note: even if not committed, the .brev/setup.sh script will persist because everythign in /home/workspace will be saved. \ud83d\udc46 This makes it really easy to change your environment without needing to commit the changes to main. Example reset a workspace with the name payments-frontend $ brev reset payments-frontend Workspace payments-frontend is resetting. Note: this can take a few seconds. Run 'brev ls' to check status start create start and join a workspace Synopsis brev start { ARG | -e} {-n | --name} {-c | --class} { -s | --setup-script} {-r | --setup-repo} {-p | --setup-path } { -o | --org} Description brev start can do the following: start a stopped workspace join a workspace in an organization create an empty workspace create a workspace from a directory on your computer create a workspace from a git url Flags -n --name specify the name for your workspace instead of brev-cli generating one for you. for example, to override the name of a workspace when creating a workspace from a git repo you could do it with then -n flag. This example creates a repo with the name cli from the git repo https://github.com/brevdev/brev-cli . $ brev start https://github.com/brevdev/brev-cli -n cli Examples Create an empty workspace $ brev start -e -n foo which has an output similar too: name foo template 4nbb4lg2s ubuntu resource class 2x8 workspace group brev-test-brevtenant-cluster workspace is starting. this can take up to 2 minutes the first time. you can safely ctrl+c to exit \u28fd workspace is deploying your workspace is ready! connect to the workspace: brev open foo # brev open <name> -> open workspace in preferred editor brev shell foo # brev shell <name> -> ssh into workspace (shortcut) ssh foo-8j4u # ssh <ssh-name> -> ssh directly to workspace or $ brev start --empty --name foo which has an output similar too: name foo template 4nbb4lg2s ubuntu resource class 2x8 workspace group brev-test-brevtenant-cluster workspace is starting. this can take up to 2 minutes the first time. you can safely ctrl+c to exit \u28fd workspace is deploying your workspace is ready! connect to the workspace: brev open foo # brev open <name> -> open workspace in preferred editor brev shell foo # brev shell <name> -> ssh into workspace (shortcut) ssh foo-8j4u # ssh <ssh-name> -> ssh directly to workspace view your workspace with brev ls create a workspace, and do not block shell until workspace is created use the -d or --detached flag to create a workspace and immediately exit rather than wait for workspace to be successfully created before exiting. $ brev start -d -e -n bar which has an output similar too: name bar template 4nbb4lg2s ubuntu resource class 2x8 workspace group brev-test-brevtenant-cluster Workspace is starting. This can take up to 2 minutes the first time. Create a workspace from a file path if in your current directory has a directory in it called merge-json , you can create a workspace using the contents of that directory using brev start merge-json $ ls merge-json $ brev start merge-json which has an output similar too: Workspace is starting. This can take up to 2 minutes the first time. name merge-json template 4nbb4lg2s ubuntu resource class 2x8 workspace group brev-test-brevtenant-cluster You can safely ctrl+c to exit \u287f workspace is deploying Your workspace is ready! Connect to the workspace: brev open merge-json # brev open <NAME> -> open workspace in preferred editor brev shell merge-json # brev shell <NAME> -> ssh into workspace (shortcut) ssh merge-json-wd6q # ssh <SSH-NAME> -> ssh directly to workspace Create a workspace from a git repository $ brev start https://github.com/brevdev/react-starter-app which has an output similar too: Workspace is starting. This can take up to 2 minutes the first time. name react-starter-app template 4nbb4lg2s ubuntu resource class 2x8 workspace group brev-test-brevtenant-cluster You can safely ctrl+c to exit \u28fe workspace is deploying Your workspace is ready! Connect to the workspace: brev open react-starter-app # brev open <NAME> -> open workspace in preferred editor brev shell react-starter-app # brev shell <NAME> -> ssh into workspace (shortcut) ssh react-starter-app-8v8p # ssh <SSH-NAME> -> ssh directly to workspace Join a workspace in your orginization view your orgs workspaces with brev ls --all . Workspaces in your org that you have not joined appear at the bottom of the output. $ brev ls --all which has an output similar too: You have 1 workspace in Org brev.dev NAME STATUS URL ID brev-cli RUNNING brev-cli-p09m-brevdev.wgt-us-west-2-test.brev.dev x1yxqp09m Connect to running workspace: brev open brev-cli # brev open <NAME> -> open workspace in preferred editor brev shell brev-cli # brev shell <NAME> -> ssh into workspace (shortcut) ssh brev-cli-p09m # ssh <SSH-NAME> -> ssh directly to workspace 7 other projects in Org brev.dev NAME MEMBERS new-docs 1 brev-landing-page 2 todo-app 1 vagrant-guide 1 mern-template 1 solidity-nextjs-starter 1 akka-http-quickstart-scala 1 Join a project: brev start new-docs join the project new-docs $ brev start new-docs which has an output similar too: Name flag omitted, using auto generated name: new-docs Workspace is starting. This can take up to 2 minutes the first time. name new-docs template 4nbb4lg2s ubuntu resource class 2x8 workspace group brev-test-brevtenant-cluster You can safely ctrl+c to exit \u28df workspace is deploying Connect to the workspace: brev open new-docs # brev open <NAME> -> open workspace in preferred editor brev shell new-docs # brev shell <NAME> -> ssh into workspace (shortcut) ssh new-docs-pek9 # ssh <SSH-NAME> -> ssh directly to workspace Start a stopped workspace If you have already joined a workspace and have stopped it with brev stop , you can start it again with brev start view your current workspaces with brev ls $ brev ls which has an output similar too: You have 1 workspace in Org brev.dev NAME STATUS URL ID linear-client STOPPED linear-client-yw1a-brevdev.wgt-us-west-2-test.brev.dev gov5jyw1a Connect to running workspace: brev open linear-client # brev open <NAME> -> open workspace in preferred editor brev shell linear-client # brev shell <NAME> -> ssh into workspace (shortcut) ssh linear-client-yw1a # ssh <SSH-NAME> -> ssh directly to workspace join the workspace $ brev start linear-client which has an output similar too: Workspace linear-client is starting. Note: this can take about a minute. Run 'brev ls' to check status You can safely ctrl+c to exit Note: if you want to make multiple workspaces with the same git repo, use the --name flag with brev start You can have multiple workspaces with the same git repo, however, each workspace must have a unique name. stop If you don't plan on using your Brev workspace, you can temporarily pause it by running brev stop workspace_name Everything in /home/workspace will be saved when it boots up again. stop multiple workspaces $ brev stop brev-deploy naive-pubsub bar euler54 merge-json Workspace brev-deploy is stopping. Note: this can take a few seconds. Run 'brev ls' to check status Workspace naive-pubsub is stopping. Note: this can take a few seconds. Run 'brev ls' to check status Workspace bar is stopping. Note: this can take a few seconds. Run 'brev ls' to check status Workspace euler54 is stopping. Note: this can take a few seconds. Run 'brev ls' to check status Workspace merge-json is stopping. Note: this can take a few seconds. Run 'brev ls' to check status port-forward Synopsis brev port-forward WS_NAME [--port LOCAL_PORT:REMOTE_PORT] Description port forward allows you to forward a port from a brev workspace to a port on your local machine. Examples Forward a port from a workspace to localhost port forward port 3333 on a workspace with the name brev-docs to port 3000 on your localhost $ brev port-forward brev-docs --port 3000 :3333 which has an output similar to 2022/07/14 11:29:02 creating new ssh config portforwarding... localhost:3000 -> brev-docs-xp43:3333 Interactively port forward a workspace: To interacticely select which port to forward from a brev workspace to your localhost, run brev-port-forward with no flag $ brev port-forward brev-docs Ports flag was omitted, running interactive mode! What port on your Brev machine would you like to forward? 3333 What port should it be on your local machine? 3000 -p 3000:3333 2022/07/14 11:31:30 creating new ssh config portforwarding... localhost:3000 -> brev-docs-xp43:3333 See Also Context Commands Brev commands run within the context of an organization, this way it's really clear if something is running under your personal account or under your organization's. Most commands support an --active-org flag for scripting purposes. ls Print a tabular view of your workspaces or orgs # print orgs brev ls orgs # print workspaces within active organization brev ls # print workspaces within any organization brev ls --org org_name set Set the organization context for your commands. brev set <org name> Housekeeping Commands jetbrains Jetbrains, unfortunately, doesn't use the standard SSH file, and instead uses a custom XML file. To establish a connection between your local computer and all of the workspaces in your organization, run: brev jetbrains This command runs a helper proxy for jetbrains products that allows your jetbrains IDEs ssh access. It does not update if new workspaces are created or deleted, so please stop the process and re-run it to update it. Note: this will hold your shell. Keep this process running to keep the connection live. If there's a timeout for whatever reason, please ctrl+c and re-run brev jetbrains . login Synopsis brev login [--token] [--skip-browser] Description This function log's you in to your brev account, and preforms some actions that brev needs to function with you user account such as set up config files and creates ~/.brev/ directory if it does not exist if you don't have an account on brev, the browser step will create one for you on first run asks you onboarding questions on first run asks you to configure ssh keys creates your first org if one does not exist imports your ide config for your workspaces <!-- todo needs elaboration> runs brev run-tasks -d <!-- todo link to doc page > Flags Examples $ brev login See Also logout Remove your keys and logout brev logout profile If you have personal settings, such as aliases or shortcuts in your ~/.zshrc or ~/.bash_profile , you can sync them with Brev.dev to make sure every workspace you create has them. Create a git repo with setup script at ~.brev/setup.sh or fork our example here . Once your setup is copied over, add it to your profile with brev profile --set-personal-config _git_repo_url_ refresh As a troubleshooting measure, you can force the cache to refresh if you suspect they're stale. brev refresh secret Use the encrypted secrets manager to load secret files and environment variables into your workspace, or set them for the entire org. Run the command in interactive mode by ommitting the flags brev secret A secret file or environment variable needs a name and a value, the scope to be set (org or private), a type (variable or file). If the secret is a file, you'll also need to supply the path Ex: personal environment variable brev secret --name SERVER_URL --value https://brev.sh --type variable --scope personal Ex: personal AWS credentials file brev secret --name AWS_KEY --value ... --type file --file-path --scope personal ssh-key Get your ssh keys to add to your git provider. brev ssh-key Quick links to add it to Github or Gitlab run-tasks Synopsis brev run-tasks -d Description In order for brev to connect to workspaces, there needs to be background daemons running to manage some things on your local machines environment. Currently, the one that is being launched by run-tasks is an ssh config file configuration daemon that periodically udpates a ssh config file with connection information in order to access you workspaces. This command has to be run at every boot, see Configuring SSH Proxy Daemon at Boot to configure this command to be run at boot. This command is set to be deprecated in favor of brev configure . Examples to run tasks in the background $ brev run-tasks -d PID File: /home/f/.brev/task_daemon.pid Log File: /home/f/.brev/task_daemon.log to run tasks in the foreground $ brev run-tasks 2022/07/11 15:28:44 creating new ssh config 2022/07/11 15:28:48 creating new ssh config See Also Configuring SSH Proxy Daemon at Boot -TODO brev configure docs","title":"CLI Docs"},{"location":"reference/brev-cli/#brev-cli-reference","text":"The Brev CLI is the preferred interface for Brev, allowing you to use cloud computers with your local development tools. Our goal is to be as invisible as possible. Every command has a --help flag if you need to see options. Brev CLI commands are broken up into 4 categories: Workspace commands Context commands SSH command Housekeeping commands.","title":"Brev CLI Reference"},{"location":"reference/brev-cli/#workspace-commands","text":"","title":"Workspace Commands"},{"location":"reference/brev-cli/#scale","text":"Scale a dev environment up or down to a different instance","title":"scale"},{"location":"reference/brev-cli/#synopsis","text":"brev scale [ Workspace Name or ID... ] --gpu [GPU Instance] # or brev scale [ Workspace Name or ID... ] --cpu [CPU Instance]","title":"Synopsis"},{"location":"reference/brev-cli/#description","text":"Move your dev environment to a different size machine. All work, settings, etc will be persisted. View available instance types here .","title":"Description"},{"location":"reference/brev-cli/#examples","text":"","title":"Examples"},{"location":"reference/brev-cli/#scale-to-a-gpu-instance","text":"$ brev scale brev-environments-ui --gpu g5g.xlarge","title":"Scale to a GPU instance"},{"location":"reference/brev-cli/#scale-to-a-cpu-instance","text":"$ brev scale brev-environments-ui --cpu 2x8","title":"Scale to a CPU instance"},{"location":"reference/brev-cli/#delete","text":"Delete a Workspace by name or ID.","title":"delete"},{"location":"reference/brev-cli/#synopsis_1","text":"brev delete [ Workspace Name or ID... ]","title":"Synopsis"},{"location":"reference/brev-cli/#description_1","text":"Deleting a workspace will permanently delete a workspace from your account. This command will delete all content in the workspace and any volumes associated with the workspace. This command is not reversable and can result in lost work.","title":"Description"},{"location":"reference/brev-cli/#examples_1","text":"","title":"Examples"},{"location":"reference/brev-cli/#delete-a-workspace","text":"$ brev delete payments-frontend Deleting workspace payments-frontend. This can take a few minutes. Run 'brev ls' to check status","title":"Delete a workspace"},{"location":"reference/brev-cli/#delete-multiple-workspaces","text":"$ brev delete bar euler54 naive-pubsub jupyter Deleting workspace bar. This can take a few minutes. Run 'brev ls' to check status Deleting workspace euler54. This can take a few minutes. Run 'brev ls' to check status Deleting workspace naive-pubsub. This can take a few minutes. Run 'brev ls' to check status Deleting workspace jupyter. This can take a few minutes. Run 'brev ls' to check status","title":"Delete multiple workspaces"},{"location":"reference/brev-cli/#reset","text":"","title":"reset"},{"location":"reference/brev-cli/#description_2","text":"This command deletes your machine and gets you a fresh one. Make sure to have a .brev setup script or you'll have to reinstall everythign manually. Note: even if not committed, the .brev/setup.sh script will persist because everythign in /home/workspace will be saved. \ud83d\udc46 This makes it really easy to change your environment without needing to commit the changes to main.","title":"Description"},{"location":"reference/brev-cli/#example","text":"reset a workspace with the name payments-frontend $ brev reset payments-frontend Workspace payments-frontend is resetting. Note: this can take a few seconds. Run 'brev ls' to check status","title":"Example"},{"location":"reference/brev-cli/#start","text":"create start and join a workspace","title":"start"},{"location":"reference/brev-cli/#synopsis_2","text":"brev start { ARG | -e} {-n | --name} {-c | --class} { -s | --setup-script} {-r | --setup-repo} {-p | --setup-path } { -o | --org}","title":"Synopsis"},{"location":"reference/brev-cli/#description_3","text":"brev start can do the following: start a stopped workspace join a workspace in an organization create an empty workspace create a workspace from a directory on your computer create a workspace from a git url","title":"Description"},{"location":"reference/brev-cli/#flags","text":"","title":"Flags"},{"location":"reference/brev-cli/#-n-name","text":"specify the name for your workspace instead of brev-cli generating one for you. for example, to override the name of a workspace when creating a workspace from a git repo you could do it with then -n flag. This example creates a repo with the name cli from the git repo https://github.com/brevdev/brev-cli . $ brev start https://github.com/brevdev/brev-cli -n cli","title":"-n --name "},{"location":"reference/brev-cli/#examples_2","text":"","title":"Examples"},{"location":"reference/brev-cli/#create-an-empty-workspace","text":"$ brev start -e -n foo which has an output similar too: name foo template 4nbb4lg2s ubuntu resource class 2x8 workspace group brev-test-brevtenant-cluster workspace is starting. this can take up to 2 minutes the first time. you can safely ctrl+c to exit \u28fd workspace is deploying your workspace is ready! connect to the workspace: brev open foo # brev open <name> -> open workspace in preferred editor brev shell foo # brev shell <name> -> ssh into workspace (shortcut) ssh foo-8j4u # ssh <ssh-name> -> ssh directly to workspace or $ brev start --empty --name foo which has an output similar too: name foo template 4nbb4lg2s ubuntu resource class 2x8 workspace group brev-test-brevtenant-cluster workspace is starting. this can take up to 2 minutes the first time. you can safely ctrl+c to exit \u28fd workspace is deploying your workspace is ready! connect to the workspace: brev open foo # brev open <name> -> open workspace in preferred editor brev shell foo # brev shell <name> -> ssh into workspace (shortcut) ssh foo-8j4u # ssh <ssh-name> -> ssh directly to workspace view your workspace with brev ls","title":"Create an empty workspace"},{"location":"reference/brev-cli/#create-a-workspace-and-do-not-block-shell-until-workspace-is-created","text":"use the -d or --detached flag to create a workspace and immediately exit rather than wait for workspace to be successfully created before exiting. $ brev start -d -e -n bar which has an output similar too: name bar template 4nbb4lg2s ubuntu resource class 2x8 workspace group brev-test-brevtenant-cluster Workspace is starting. This can take up to 2 minutes the first time.","title":"create a workspace, and do not block shell until workspace is created"},{"location":"reference/brev-cli/#create-a-workspace-from-a-file-path","text":"if in your current directory has a directory in it called merge-json , you can create a workspace using the contents of that directory using brev start merge-json $ ls merge-json $ brev start merge-json which has an output similar too: Workspace is starting. This can take up to 2 minutes the first time. name merge-json template 4nbb4lg2s ubuntu resource class 2x8 workspace group brev-test-brevtenant-cluster You can safely ctrl+c to exit \u287f workspace is deploying Your workspace is ready! Connect to the workspace: brev open merge-json # brev open <NAME> -> open workspace in preferred editor brev shell merge-json # brev shell <NAME> -> ssh into workspace (shortcut) ssh merge-json-wd6q # ssh <SSH-NAME> -> ssh directly to workspace","title":"Create a workspace from a file path"},{"location":"reference/brev-cli/#create-a-workspace-from-a-git-repository","text":"$ brev start https://github.com/brevdev/react-starter-app which has an output similar too: Workspace is starting. This can take up to 2 minutes the first time. name react-starter-app template 4nbb4lg2s ubuntu resource class 2x8 workspace group brev-test-brevtenant-cluster You can safely ctrl+c to exit \u28fe workspace is deploying Your workspace is ready! Connect to the workspace: brev open react-starter-app # brev open <NAME> -> open workspace in preferred editor brev shell react-starter-app # brev shell <NAME> -> ssh into workspace (shortcut) ssh react-starter-app-8v8p # ssh <SSH-NAME> -> ssh directly to workspace","title":"Create a workspace from a git repository"},{"location":"reference/brev-cli/#join-a-workspace-in-your-orginization","text":"view your orgs workspaces with brev ls --all . Workspaces in your org that you have not joined appear at the bottom of the output. $ brev ls --all which has an output similar too: You have 1 workspace in Org brev.dev NAME STATUS URL ID brev-cli RUNNING brev-cli-p09m-brevdev.wgt-us-west-2-test.brev.dev x1yxqp09m Connect to running workspace: brev open brev-cli # brev open <NAME> -> open workspace in preferred editor brev shell brev-cli # brev shell <NAME> -> ssh into workspace (shortcut) ssh brev-cli-p09m # ssh <SSH-NAME> -> ssh directly to workspace 7 other projects in Org brev.dev NAME MEMBERS new-docs 1 brev-landing-page 2 todo-app 1 vagrant-guide 1 mern-template 1 solidity-nextjs-starter 1 akka-http-quickstart-scala 1 Join a project: brev start new-docs join the project new-docs $ brev start new-docs which has an output similar too: Name flag omitted, using auto generated name: new-docs Workspace is starting. This can take up to 2 minutes the first time. name new-docs template 4nbb4lg2s ubuntu resource class 2x8 workspace group brev-test-brevtenant-cluster You can safely ctrl+c to exit \u28df workspace is deploying Connect to the workspace: brev open new-docs # brev open <NAME> -> open workspace in preferred editor brev shell new-docs # brev shell <NAME> -> ssh into workspace (shortcut) ssh new-docs-pek9 # ssh <SSH-NAME> -> ssh directly to workspace","title":"Join a workspace in your orginization"},{"location":"reference/brev-cli/#start-a-stopped-workspace","text":"If you have already joined a workspace and have stopped it with brev stop , you can start it again with brev start view your current workspaces with brev ls $ brev ls which has an output similar too: You have 1 workspace in Org brev.dev NAME STATUS URL ID linear-client STOPPED linear-client-yw1a-brevdev.wgt-us-west-2-test.brev.dev gov5jyw1a Connect to running workspace: brev open linear-client # brev open <NAME> -> open workspace in preferred editor brev shell linear-client # brev shell <NAME> -> ssh into workspace (shortcut) ssh linear-client-yw1a # ssh <SSH-NAME> -> ssh directly to workspace join the workspace $ brev start linear-client which has an output similar too: Workspace linear-client is starting. Note: this can take about a minute. Run 'brev ls' to check status You can safely ctrl+c to exit Note: if you want to make multiple workspaces with the same git repo, use the --name flag with brev start You can have multiple workspaces with the same git repo, however, each workspace must have a unique name.","title":"Start a stopped workspace"},{"location":"reference/brev-cli/#stop","text":"If you don't plan on using your Brev workspace, you can temporarily pause it by running brev stop workspace_name Everything in /home/workspace will be saved when it boots up again. stop multiple workspaces $ brev stop brev-deploy naive-pubsub bar euler54 merge-json Workspace brev-deploy is stopping. Note: this can take a few seconds. Run 'brev ls' to check status Workspace naive-pubsub is stopping. Note: this can take a few seconds. Run 'brev ls' to check status Workspace bar is stopping. Note: this can take a few seconds. Run 'brev ls' to check status Workspace euler54 is stopping. Note: this can take a few seconds. Run 'brev ls' to check status Workspace merge-json is stopping. Note: this can take a few seconds. Run 'brev ls' to check status","title":"stop"},{"location":"reference/brev-cli/#port-forward","text":"","title":"port-forward"},{"location":"reference/brev-cli/#synopsis_3","text":"brev port-forward WS_NAME [--port LOCAL_PORT:REMOTE_PORT]","title":"Synopsis"},{"location":"reference/brev-cli/#description_4","text":"port forward allows you to forward a port from a brev workspace to a port on your local machine.","title":"Description"},{"location":"reference/brev-cli/#examples_3","text":"","title":"Examples"},{"location":"reference/brev-cli/#forward-a-port-from-a-workspace-to-localhost","text":"port forward port 3333 on a workspace with the name brev-docs to port 3000 on your localhost $ brev port-forward brev-docs --port 3000 :3333 which has an output similar to 2022/07/14 11:29:02 creating new ssh config portforwarding... localhost:3000 -> brev-docs-xp43:3333","title":"Forward a port from a workspace to localhost"},{"location":"reference/brev-cli/#interactively-port-forward-a-workspace","text":"To interacticely select which port to forward from a brev workspace to your localhost, run brev-port-forward with no flag $ brev port-forward brev-docs Ports flag was omitted, running interactive mode! What port on your Brev machine would you like to forward? 3333 What port should it be on your local machine? 3000 -p 3000:3333 2022/07/14 11:31:30 creating new ssh config portforwarding... localhost:3000 -> brev-docs-xp43:3333","title":"Interactively port forward a workspace:"},{"location":"reference/brev-cli/#see-also","text":"","title":"See Also"},{"location":"reference/brev-cli/#context-commands","text":"Brev commands run within the context of an organization, this way it's really clear if something is running under your personal account or under your organization's. Most commands support an --active-org flag for scripting purposes.","title":"Context Commands"},{"location":"reference/brev-cli/#ls","text":"Print a tabular view of your workspaces or orgs # print orgs brev ls orgs # print workspaces within active organization brev ls # print workspaces within any organization brev ls --org org_name","title":"ls"},{"location":"reference/brev-cli/#set","text":"Set the organization context for your commands. brev set <org name>","title":"set"},{"location":"reference/brev-cli/#housekeeping-commands","text":"","title":"Housekeeping Commands"},{"location":"reference/brev-cli/#jetbrains","text":"Jetbrains, unfortunately, doesn't use the standard SSH file, and instead uses a custom XML file. To establish a connection between your local computer and all of the workspaces in your organization, run: brev jetbrains This command runs a helper proxy for jetbrains products that allows your jetbrains IDEs ssh access. It does not update if new workspaces are created or deleted, so please stop the process and re-run it to update it. Note: this will hold your shell. Keep this process running to keep the connection live. If there's a timeout for whatever reason, please ctrl+c and re-run brev jetbrains .","title":"jetbrains"},{"location":"reference/brev-cli/#login","text":"","title":"login"},{"location":"reference/brev-cli/#synopsis_4","text":"brev login [--token] [--skip-browser]","title":"Synopsis"},{"location":"reference/brev-cli/#description_5","text":"This function log's you in to your brev account, and preforms some actions that brev needs to function with you user account such as set up config files and creates ~/.brev/ directory if it does not exist if you don't have an account on brev, the browser step will create one for you on first run asks you onboarding questions on first run asks you to configure ssh keys creates your first org if one does not exist imports your ide config for your workspaces <!-- todo needs elaboration> runs brev run-tasks -d <!-- todo link to doc page >","title":"Description"},{"location":"reference/brev-cli/#flags_1","text":"","title":"Flags"},{"location":"reference/brev-cli/#examples_4","text":"$ brev login","title":"Examples"},{"location":"reference/brev-cli/#see-also_1","text":"","title":"See Also"},{"location":"reference/brev-cli/#logout","text":"Remove your keys and logout brev logout","title":"logout"},{"location":"reference/brev-cli/#profile","text":"If you have personal settings, such as aliases or shortcuts in your ~/.zshrc or ~/.bash_profile , you can sync them with Brev.dev to make sure every workspace you create has them. Create a git repo with setup script at ~.brev/setup.sh or fork our example here . Once your setup is copied over, add it to your profile with brev profile --set-personal-config _git_repo_url_","title":"profile"},{"location":"reference/brev-cli/#refresh","text":"As a troubleshooting measure, you can force the cache to refresh if you suspect they're stale. brev refresh","title":"refresh"},{"location":"reference/brev-cli/#secret","text":"Use the encrypted secrets manager to load secret files and environment variables into your workspace, or set them for the entire org. Run the command in interactive mode by ommitting the flags brev secret A secret file or environment variable needs a name and a value, the scope to be set (org or private), a type (variable or file). If the secret is a file, you'll also need to supply the path Ex: personal environment variable brev secret --name SERVER_URL --value https://brev.sh --type variable --scope personal Ex: personal AWS credentials file brev secret --name AWS_KEY --value ... --type file --file-path --scope personal","title":"secret"},{"location":"reference/brev-cli/#ssh-key","text":"Get your ssh keys to add to your git provider. brev ssh-key Quick links to add it to Github or Gitlab","title":"ssh-key"},{"location":"reference/brev-cli/#run-tasks","text":"","title":"run-tasks"},{"location":"reference/brev-cli/#synopsis_5","text":"brev run-tasks -d","title":"Synopsis"},{"location":"reference/brev-cli/#description_6","text":"In order for brev to connect to workspaces, there needs to be background daemons running to manage some things on your local machines environment. Currently, the one that is being launched by run-tasks is an ssh config file configuration daemon that periodically udpates a ssh config file with connection information in order to access you workspaces. This command has to be run at every boot, see Configuring SSH Proxy Daemon at Boot to configure this command to be run at boot. This command is set to be deprecated in favor of brev configure .","title":"Description"},{"location":"reference/brev-cli/#examples_5","text":"to run tasks in the background $ brev run-tasks -d PID File: /home/f/.brev/task_daemon.pid Log File: /home/f/.brev/task_daemon.log to run tasks in the foreground $ brev run-tasks 2022/07/11 15:28:44 creating new ssh config 2022/07/11 15:28:48 creating new ssh config","title":"Examples"},{"location":"reference/brev-cli/#see-also_2","text":"Configuring SSH Proxy Daemon at Boot -TODO brev configure docs","title":"See Also"},{"location":"reference/debugging/","text":"Brev Debugging This page has common hurdles or known issues that we're addressing. Reset Brev If you're noticing some workspaces to be missing, use the Brev refresh command to try forcing a refresh to the ssh config and ensuring the daemon is started: brev refresh 500 error when running brev start If you run brev start and see the following 500 error: \u279c ~ brev start https://github.com/brevdev/hello-react Name flag omitted, using auto generated name: brevdev/hello-react Workspace is starting. This can take up to 2 minutes the first time. [ error ] /home/runner/work/brev-cli/brev-cli/pkg/cmd/start/start.go:260 : https://ade5dtvtaa.execute-api.us-east-1.amazonaws.com/api/organizations/ejmrvoj8m/workspaces?utm_source = cli 500 Internal Server Error It is likely that you just deleted the workspace and it is still deleting. Please wait 5 seconds and try again. Workspace version issue If you've used Brev with older version of the CLI, it's likely that your workspaces need to be upgraded. You might see an error like this: workspace of version v1.6.8 is not supported with this cli version \\n upgrade your workspace or downgrade your cli \" There isn't a command to upgrade the workspaces yet, so in the interim, please delete the workspace and create it again. brev delete brev-cli # if someone else in your org has the workspace brev start https://github.com/brevdev/brev-cli or if someone else in your org has the same workspace, you can brev start by name to create your own workspace. Run brev ls --all to see workspaces already in your org. # if someone else in your org has the workspace brev start brev-cli Global npm install issues If you try npm installing something globally, it might not work without sudo. Rerun the command with sudo, ex sudo npm install http-server -g . Reach out to support if you're still having issues: https://discord.gg/NVDyv7TUgJ See all the startup logs Sometimes weird issues happen when configuring the machine, for example, the project folder is empty because ssh keys weren't configured and the repo couldn't be cloned. You can view the full startup logs by running sudo cat /var/log/brev-workspace.log inside your workspace. Run Brev without internet Do you want to run Brev.dev locally without needing internet? We're launching the V2 in late June and would love for you to try it! Hop in the discord and let us know you're waiting for it! https://discord.gg/NVDyv7TUgJ","title":"Debugging"},{"location":"reference/debugging/#brev-debugging","text":"This page has common hurdles or known issues that we're addressing.","title":"Brev Debugging"},{"location":"reference/debugging/#reset-brev","text":"If you're noticing some workspaces to be missing, use the Brev refresh command to try forcing a refresh to the ssh config and ensuring the daemon is started: brev refresh","title":"Reset Brev"},{"location":"reference/debugging/#500-error-when-running-brev-start","text":"If you run brev start and see the following 500 error: \u279c ~ brev start https://github.com/brevdev/hello-react Name flag omitted, using auto generated name: brevdev/hello-react Workspace is starting. This can take up to 2 minutes the first time. [ error ] /home/runner/work/brev-cli/brev-cli/pkg/cmd/start/start.go:260 : https://ade5dtvtaa.execute-api.us-east-1.amazonaws.com/api/organizations/ejmrvoj8m/workspaces?utm_source = cli 500 Internal Server Error It is likely that you just deleted the workspace and it is still deleting. Please wait 5 seconds and try again.","title":"500 error when running brev start"},{"location":"reference/debugging/#workspace-version-issue","text":"If you've used Brev with older version of the CLI, it's likely that your workspaces need to be upgraded. You might see an error like this: workspace of version v1.6.8 is not supported with this cli version \\n upgrade your workspace or downgrade your cli \" There isn't a command to upgrade the workspaces yet, so in the interim, please delete the workspace and create it again. brev delete brev-cli # if someone else in your org has the workspace brev start https://github.com/brevdev/brev-cli or if someone else in your org has the same workspace, you can brev start by name to create your own workspace. Run brev ls --all to see workspaces already in your org. # if someone else in your org has the workspace brev start brev-cli","title":"Workspace version issue"},{"location":"reference/debugging/#global-npm-install-issues","text":"If you try npm installing something globally, it might not work without sudo. Rerun the command with sudo, ex sudo npm install http-server -g . Reach out to support if you're still having issues: https://discord.gg/NVDyv7TUgJ","title":"Global npm install issues"},{"location":"reference/debugging/#see-all-the-startup-logs","text":"Sometimes weird issues happen when configuring the machine, for example, the project folder is empty because ssh keys weren't configured and the repo couldn't be cloned. You can view the full startup logs by running sudo cat /var/log/brev-workspace.log inside your workspace.","title":"See all the startup logs"},{"location":"reference/debugging/#run-brev-without-internet","text":"Do you want to run Brev.dev locally without needing internet? We're launching the V2 in late June and would love for you to try it! Hop in the discord and let us know you're waiting for it! https://discord.gg/NVDyv7TUgJ","title":"Run Brev without internet"},{"location":"reference/dot-brev-setup-script/","text":"Reference Creating a .brev setup script for each Brev project will standardize dependencies, packages and tools across all developers contributing to the same project (ex. Node v14, Yarn v1.22). Brev will create a /.brev/setup.sh script in your workspace. Commit this to your repo to have it executed for every new Brev machine The setup scripts run from your project directory, so /home/brev/<YOUR_PROJECT_FOLDER_NAME> .brev/setup.sh This is the main configuration file that runs on your Brev machine, right after your project is cloned. The working directory when the file is running is /home/brev/<PROJECT_FOLDER_NAME> . Careful not to place user settings in here (like VSCode extensions or settings) unless you want to impose them for every contributor in the project. Sometimes this is desireable, for example, to standardize linting practices across the team. Personal settings should go in your personal .brev, see more here: /howto/copy-personal-settings . A log file with output from the script. It is located at ./.brev/logs/setup.log . We strongly encourage echo-ing statements into this file when installing new software to know where errors might be located. You can look to setup your .brev directory for a cheatsheet of common installations. Note: Brev only hands over the machine once the setup is complete. This means running an open ended process like starting a server with npm run start in your .brev setup script will appear to be infinitely loading. We're working on a fix, but for now, please do not run open ended processes in this script. Branching your environment You might want to experiment with environment changes without modifying the .brev/setup.sh file committed to main. You can do this easily with the brev reset command. Simply make changes to the setup script and run brev reset . brev reset preserves your file system, including uncommited changes, while getting you a clean environment. This will run your new setup script on fresh hardware. .brev/ports.yaml You can specify which ports you want publicly accessible. By default, any connection to your project is password protected. Although this is secure, it prevents testing routes, connecting different services (like a backend and frontend), and publicly sharing your project. Use this file to make your localhost url publicly accessible and share it with others. Be sure to never share your password! For example, if we run a React app on port 3000, we would want to expose port 3000 so we can use 3000-brevurl.brev.sh to access localhost:3000 . Note: often there's a security layer built into the code (for example, user auth) so publicly exposing a port is not a security worry. If there is a security concern with opening a port publicly, you can use the Brev CLI to port forward your Brev workspace port to your localhost. See below: Using Docker instead of a Bash Script You might be thinking \"the world is Dockerized, why use .sh scripts?\" Well, we agree. We're working on a V2 which will replace the .sh scripts with Dockerfiles. The dockerfile can simply RUN sh setup.sh for backwards compatibility, and you can run a docker-compose line in your setup script today.","title":"Setup Scripts (.brev)"},{"location":"reference/dot-brev-setup-script/#reference","text":"Creating a .brev setup script for each Brev project will standardize dependencies, packages and tools across all developers contributing to the same project (ex. Node v14, Yarn v1.22). Brev will create a /.brev/setup.sh script in your workspace. Commit this to your repo to have it executed for every new Brev machine The setup scripts run from your project directory, so /home/brev/<YOUR_PROJECT_FOLDER_NAME>","title":"Reference"},{"location":"reference/dot-brev-setup-script/#brevsetupsh","text":"This is the main configuration file that runs on your Brev machine, right after your project is cloned. The working directory when the file is running is /home/brev/<PROJECT_FOLDER_NAME> . Careful not to place user settings in here (like VSCode extensions or settings) unless you want to impose them for every contributor in the project. Sometimes this is desireable, for example, to standardize linting practices across the team. Personal settings should go in your personal .brev, see more here: /howto/copy-personal-settings . A log file with output from the script. It is located at ./.brev/logs/setup.log . We strongly encourage echo-ing statements into this file when installing new software to know where errors might be located. You can look to setup your .brev directory for a cheatsheet of common installations. Note: Brev only hands over the machine once the setup is complete. This means running an open ended process like starting a server with npm run start in your .brev setup script will appear to be infinitely loading. We're working on a fix, but for now, please do not run open ended processes in this script.","title":".brev/setup.sh"},{"location":"reference/dot-brev-setup-script/#branching-your-environment","text":"You might want to experiment with environment changes without modifying the .brev/setup.sh file committed to main. You can do this easily with the brev reset command. Simply make changes to the setup script and run brev reset . brev reset preserves your file system, including uncommited changes, while getting you a clean environment. This will run your new setup script on fresh hardware.","title":"Branching your environment"},{"location":"reference/dot-brev-setup-script/#brevportsyaml","text":"You can specify which ports you want publicly accessible. By default, any connection to your project is password protected. Although this is secure, it prevents testing routes, connecting different services (like a backend and frontend), and publicly sharing your project. Use this file to make your localhost url publicly accessible and share it with others. Be sure to never share your password! For example, if we run a React app on port 3000, we would want to expose port 3000 so we can use 3000-brevurl.brev.sh to access localhost:3000 . Note: often there's a security layer built into the code (for example, user auth) so publicly exposing a port is not a security worry. If there is a security concern with opening a port publicly, you can use the Brev CLI to port forward your Brev workspace port to your localhost. See below:","title":".brev/ports.yaml"},{"location":"reference/dot-brev-setup-script/#using-docker-instead-of-a-bash-script","text":"You might be thinking \"the world is Dockerized, why use .sh scripts?\" Well, we agree. We're working on a V2 which will replace the .sh scripts with Dockerfiles. The dockerfile can simply RUN sh setup.sh for backwards compatibility, and you can run a docker-compose line in your setup script today.","title":"Using Docker instead of a Bash Script"},{"location":"reference/gpu/","text":"Brev for GPU Dev Environments! \ud83e\udd19 This page is documentation for Brev GPU dev environments. Brev can help save money on GPUs by: Automatically shutting down the instance after 3 hours of inactivity. All uncommitted work is saved and can be easily resumed. Enabling your dev environment to change instances. You can start on a very cheap 2x4 and only move to a GPU instance when you need it, and back down to a CPU-only instance using the brev scale command or through the UI. Getting Started To start using Brev GPU dev environments, upgrade your CLI to the latest (or install it) brew install brevdev/homebrew-brev/brev To install brew upgrade brevdev/homebrew-brev/brev How to upgrade or downgrade your dev environment Using the CLI: Run brev scale with the instance you want to scale up or down to. Use the --gpu or --cpu flag accordingly. For example, to scale to a g5g.xlarge GPU instance, run: brev scale brev-environments-ui --gpu g5g.xlarge To scale into a 2x8 CPU instance, run: brev scale brev-environments-ui --cpu 2x8 See below for available instance types Using the UI: From the console , click on your dev environment to go to the environment settings page Click on the \"Machine Settings\" tab to change the instance type Click on GPU or CPU to see the different instance types Once the new instance is selected, click Deploy Changes and hang tight while it updates CPU instance types Instance Name CPU mem 2x2 2 2 2x4 2 4 2x8 2 8 4x16 4 16 8x32 8 32 GPU instance types Instance Name GPU vCPU mem GPUMem p4d.24xlarge 8 96 1152 320 p3.2xlarge 1 8 61 16 p3.8xlarge 4 32 244 64 p3.16xlarge 8 64 488 128 p3dn.24xlarge 8 96 768 256 p2.xlarge 1 4 61 12 p2.8xlarge 8 32 488 96 p2.16xlarge 16 64 732 192 g5.xlarge 1 4 16 24 g5.2xlarge 1 8 32 24 g5.4xlarge 1 16 64 24 g5.8xlarge 1 32 128 24 g5.16xlarge 1 64 256 24 g5.12xlarge 4 48 192 96 g5.24xlarge 4 96 384 96 g5.48xlarge 8 192 768 192 g5g.xlarge 1 8 4 16 g5g.2xlarge 1 16 8 16 g5g.4xlarge 1 32 16 16 g5g.8xlarge 1 64 32 16 g5g.16xlarge 2 128 64 32 g5g.metal 2 128 64 32 g4dn.xlarge 1 4 16 16 g4dn.2xlarge 1 8 32 16 g4dn.4xlarge 1 16 64 16 g4dn.8xlarge 1 32 128 16 g4dn.16xlarge 1 64 256 16 g4dn.12xlarge 4 48 192 64 g4dn.metal 8 96 384 128 g4ad.xlarge 1 4 16 8 g4ad.2xlarge 1 8 32 8 g4ad.4xlarge 1 16 64 8 g4ad.8xlarge 2 32 128 16 g4ad.16xlarge 4 64 256 32 g3s.xlarge 1 4 30.5 8 g3.4xlarge 1 16 122 8 g3.8xlarge 2 32 244 16 g3.16xlarge 4 64 488 32","title":"GPU Dev Environments"},{"location":"reference/gpu/#brev-for-gpu-dev-environments","text":"This page is documentation for Brev GPU dev environments. Brev can help save money on GPUs by: Automatically shutting down the instance after 3 hours of inactivity. All uncommitted work is saved and can be easily resumed. Enabling your dev environment to change instances. You can start on a very cheap 2x4 and only move to a GPU instance when you need it, and back down to a CPU-only instance using the brev scale command or through the UI.","title":"Brev for GPU Dev Environments! \ud83e\udd19"},{"location":"reference/gpu/#getting-started","text":"To start using Brev GPU dev environments, upgrade your CLI to the latest (or install it) brew install brevdev/homebrew-brev/brev To install brew upgrade brevdev/homebrew-brev/brev","title":"Getting Started"},{"location":"reference/gpu/#how-to-upgrade-or-downgrade-your-dev-environment","text":"Using the CLI: Run brev scale with the instance you want to scale up or down to. Use the --gpu or --cpu flag accordingly. For example, to scale to a g5g.xlarge GPU instance, run: brev scale brev-environments-ui --gpu g5g.xlarge To scale into a 2x8 CPU instance, run: brev scale brev-environments-ui --cpu 2x8 See below for available instance types Using the UI: From the console , click on your dev environment to go to the environment settings page Click on the \"Machine Settings\" tab to change the instance type Click on GPU or CPU to see the different instance types Once the new instance is selected, click Deploy Changes and hang tight while it updates","title":"How to upgrade or downgrade your dev environment"},{"location":"reference/gpu/#cpu-instance-types","text":"Instance Name CPU mem 2x2 2 2 2x4 2 4 2x8 2 8 4x16 4 16 8x32 8 32","title":"CPU instance types"},{"location":"reference/gpu/#gpu-instance-types","text":"Instance Name GPU vCPU mem GPUMem p4d.24xlarge 8 96 1152 320 p3.2xlarge 1 8 61 16 p3.8xlarge 4 32 244 64 p3.16xlarge 8 64 488 128 p3dn.24xlarge 8 96 768 256 p2.xlarge 1 4 61 12 p2.8xlarge 8 32 488 96 p2.16xlarge 16 64 732 192 g5.xlarge 1 4 16 24 g5.2xlarge 1 8 32 24 g5.4xlarge 1 16 64 24 g5.8xlarge 1 32 128 24 g5.16xlarge 1 64 256 24 g5.12xlarge 4 48 192 96 g5.24xlarge 4 96 384 96 g5.48xlarge 8 192 768 192 g5g.xlarge 1 8 4 16 g5g.2xlarge 1 16 8 16 g5g.4xlarge 1 32 16 16 g5g.8xlarge 1 64 32 16 g5g.16xlarge 2 128 64 32 g5g.metal 2 128 64 32 g4dn.xlarge 1 4 16 16 g4dn.2xlarge 1 8 32 16 g4dn.4xlarge 1 16 64 16 g4dn.8xlarge 1 32 128 16 g4dn.16xlarge 1 64 256 16 g4dn.12xlarge 4 48 192 64 g4dn.metal 8 96 384 128 g4ad.xlarge 1 4 16 8 g4ad.2xlarge 1 8 32 8 g4ad.4xlarge 1 16 64 8 g4ad.8xlarge 2 32 128 16 g4ad.16xlarge 4 64 256 32 g3s.xlarge 1 4 30.5 8 g3.4xlarge 1 16 122 8 g3.8xlarge 2 32 244 16 g3.16xlarge 4 64 488 32","title":"GPU instance types"},{"location":"tutorials/","text":"Tutorials Automatically set up Brev machines Configure a Brev machine to automatically set itself up on startup","title":"Tutorials"},{"location":"tutorials/#tutorials","text":"","title":"Tutorials"},{"location":"tutorials/#automatically-set-up-brev-machines","text":"Configure a Brev machine to automatically set itself up on startup","title":"Automatically set up Brev machines"}]}